// <auto-generated />
using System;
using Ineditta.Repository.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ineditta.Repository.Migrations
{
    [DbContext(typeof(InedittaDbContext))]
    [Migration("20240308213557_v194")]
    partial class v194
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("Ineditta.Application.Acompanhamentos.Ccts.Entities.AcompanhamentoCct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Abrangencia")
                        .HasColumnType("LONGTEXT")
                        .HasColumnName("abrangencia");

                    b.Property<string>("CnaesIds")
                        .HasColumnType("json")
                        .HasColumnName("cnaes_ids");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("DATETIME")
                        .HasColumnName("data_alteracao");

                    b.Property<string>("DataBase")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("data_base");

                    b.Property<DateOnly?>("DataFinal")
                        .HasColumnType("date")
                        .HasColumnName("data_final");

                    b.Property<DateTime?>("DataInclusao")
                        .HasColumnType("DATETIME")
                        .HasColumnName("data_inclusao");

                    b.Property<DateOnly>("DataInicial")
                        .HasColumnType("date")
                        .HasColumnName("data_inicial");

                    b.Property<DateOnly?>("DataProcessamento")
                        .HasColumnType("date")
                        .HasColumnName("data_processamento");

                    b.Property<string>("EmpresasIds")
                        .HasColumnType("json")
                        .HasColumnName("empresas_ids");

                    b.Property<long?>("FaseId")
                        .HasColumnType("bigint")
                        .HasColumnName("fase_id");

                    b.Property<string>("GruposEconomicosIds")
                        .HasColumnType("json")
                        .HasColumnName("grupos_economicos_ids");

                    b.Property<string>("ObservacoesGerais")
                        .HasColumnType("text")
                        .HasColumnName("observacoes_gerais");

                    b.Property<DateOnly?>("ProximaLigacao")
                        .HasColumnType("date")
                        .HasColumnName("proxima_ligacao");

                    b.Property<string>("ScriptsSalvos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("json")
                        .HasColumnName("scripts_salvos")
                        .HasDefaultValueSql("_utf8mb4\\'[]\\'");

                    b.Property<long?>("StatusId")
                        .HasMaxLength(15)
                        .HasColumnType("bigint")
                        .HasColumnName("status");

                    b.Property<int>("TipoDocumentoId")
                        .HasColumnType("int")
                        .HasColumnName("tipo_documento_id");

                    b.Property<int?>("UsuarioAlteracaoId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_alteracao_id");

                    b.Property<int?>("UsuarioInclusaoId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_inclusao_id");

                    b.Property<int>("UsuarioResponsavelId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_responsavel_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("StatusId");

                    b.HasIndex(new[] { "FaseId" }, "fases_cct_id_fases_ifbk2");

                    b.HasIndex(new[] { "TipoDocumentoId" }, "tipo_doc_idtipo_doc_ifbk5");

                    b.ToTable("acompanhamento_cct_tb", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.Acompanhamentos.CctsEstabelecimentos.Entities.AcompanhamentoCctEstabelecimento", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long>("AcompanhamentoCctId")
                        .HasColumnType("bigint")
                        .HasColumnName("acompanhamento_cct_id");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("empresa_id");

                    b.Property<int>("EstabelecimentoId")
                        .HasColumnType("int")
                        .HasColumnName("estabelecimento_id");

                    b.Property<int>("GrupoEconomicoId")
                        .HasColumnType("int")
                        .HasColumnName("grupo_economico_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstabelecimentoId");

                    b.HasIndex("GrupoEconomicoId");

                    b.HasIndex(new[] { "AcompanhamentoCctId" }, "ix001_acompanhamento_cct_estabelecimento_tb");

                    b.HasIndex(new[] { "AcompanhamentoCctId", "EstabelecimentoId", "GrupoEconomicoId", "EmpresaId" }, "ix002_acompanhamento_cct_estabelecimento_tb")
                        .IsUnique();

                    b.ToTable("acompanhamento_cct_estabelecimento_tb", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.Acompanhamentos.CctsLocalizacoes.Entities.AcompanhamentoCctLocalizacao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long>("AcompanhamentoCctId")
                        .HasColumnType("bigint")
                        .HasColumnName("acompanhamento_cct_id");

                    b.Property<int>("LocalizacaoId")
                        .HasColumnType("int")
                        .HasColumnName("localizacao_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("LocalizacaoId");

                    b.HasIndex(new[] { "AcompanhamentoCctId" }, "ix001_acompanhamento_cct_localizacao_tb");

                    b.HasIndex(new[] { "AcompanhamentoCctId", "LocalizacaoId" }, "ix002_acompanhamento_cct_localizacao_tb");

                    b.ToTable("acompanhamento_cct_localizacao_tb", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.Acompanhamentos.CctsSindicatosLaborais.Entities.AcompanhamentoCctSinditoLaboral", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long>("AcompanhamentoCctId")
                        .HasColumnType("bigint")
                        .HasColumnName("acompanhamento_cct_id");

                    b.Property<int>("SindicatoId")
                        .HasColumnType("int")
                        .HasColumnName("sindicato_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("SindicatoId");

                    b.HasIndex(new[] { "AcompanhamentoCctId" }, "ix001_acompanhamento_cct_sindicato_laboral_tb");

                    b.HasIndex(new[] { "AcompanhamentoCctId", "SindicatoId" }, "ix002_acompanhamento_cct_sindicato_laboral_tb")
                        .IsUnique();

                    b.ToTable("acompanhamento_cct_sindicato_laboral_tb", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.Acompanhamentos.CctsSindicatosPatronais.Entities.AcompanhamentoCctSinditoPatronal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long>("AcompanhamentoCctId")
                        .HasColumnType("bigint")
                        .HasColumnName("acompanhamento_cct_id");

                    b.Property<int>("SindicatoId")
                        .HasColumnType("int")
                        .HasColumnName("sindicato_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("SindicatoId");

                    b.HasIndex(new[] { "AcompanhamentoCctId" }, "ix001_acompanhamento_cct_sindicato_patronal_tb");

                    b.HasIndex(new[] { "AcompanhamentoCctId", "SindicatoId" }, "ix002_acompanhamento_cct_sindicato_patronal_tb")
                        .IsUnique();

                    b.ToTable("acompanhamento_cct_sindicato_patronal_tb", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.Acompanhamentos.CctsStatus.Entities.AcompanhamentoCctStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("descricao");

                    b.HasKey("Id");

                    b.ToTable("acompanhamento_cct_status_tb", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.BasesTerritoriaisLaborais.Entities.BaseTerritorialLaboral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idbase_territorialSindEmp");

                    b.Property<int>("CnaeId")
                        .HasColumnType("int")
                        .HasColumnName("classe_cnae_idclasse_cnae");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("DATETIME")
                        .HasColumnName("data_alteracao");

                    b.Property<DateOnly?>("DataFinal")
                        .HasColumnType("date")
                        .HasColumnName("data_final");

                    b.Property<DateTime?>("DataInclusao")
                        .HasColumnType("DATETIME")
                        .HasColumnName("data_inclusao");

                    b.Property<DateOnly>("DataInicial")
                        .HasColumnType("date")
                        .HasColumnName("data_inicial");

                    b.Property<string>("DataNegociacao")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("dataneg");

                    b.Property<int>("LocalizacaoId")
                        .HasColumnType("int")
                        .HasColumnName("localizacao_id_localizacao1");

                    b.Property<int>("SindicatoId")
                        .HasColumnType("int")
                        .HasColumnName("sind_empregados_id_sinde1");

                    b.Property<int?>("UsuarioAlteracaoId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_alteracao_id");

                    b.Property<int?>("UsuarioInclusaoId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_inclusao_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CnaeId" }, "classe_cnae_idclasse_cnae");

                    b.HasIndex(new[] { "LocalizacaoId" }, "localizacao_id_localizacao1");

                    b.HasIndex(new[] { "SindicatoId" }, "sind_empregados_id_sinde1");

                    b.ToTable("base_territorialsindemp", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Application.BasesTerritoriaisPatronais.Entities.BaseTerritorialPatronal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idbase_territorialSindPatro");

                    b.Property<int>("CnaeId")
                        .HasColumnType("int")
                        .HasColumnName("classe_cnae_idclasse_cnae");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("DATETIME")
                        .HasColumnName("data_alteracao");

                    b.Property<DateOnly?>("DataFinal")
                        .HasColumnType("date")
                        .HasColumnName("data_final");

                    b.Property<DateTime?>("DataInclusao")
                        .HasColumnType("DATETIME")
                        .HasColumnName("data_inclusao");

                    b.Property<DateOnly>("DataInicial")
                        .HasColumnType("date")
                        .HasColumnName("data_inicial");

                    b.Property<int>("LocalizacaoId")
                        .HasColumnType("int")
                        .HasColumnName("localizacao_id_localizacao1");

                    b.Property<int>("SindicatoId")
                        .HasColumnType("int")
                        .HasColumnName("sind_patronal_id_sindp");

                    b.Property<int?>("UsuarioAlteracaoId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_alteracao_id");

                    b.Property<int?>("UsuarioInclusaoId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_inclusao_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CnaeId" }, "classe_cnae_idclasse_cnae")
                        .HasDatabaseName("classe_cnae_idclasse_cnae1");

                    b.HasIndex(new[] { "LocalizacaoId" }, "localizacao_id_localizacao1")
                        .HasDatabaseName("localizacao_id_localizacao11");

                    b.HasIndex(new[] { "SindicatoId" }, "sind_patronal_id_sindp");

                    b.ToTable("base_territorialsindpatro", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.CalendarioSindicais.Eventos.Entities.CalendarioSindical", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("ativo");

                    b.Property<long>("ChaveReferenciaId")
                        .HasColumnType("bigint")
                        .HasColumnName("chave_referencia");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("DATETIME")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime?>("DataInclusao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("data_inclusao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DataReferencia")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_referencia");

                    b.Property<TimeSpan?>("NotificarAntes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time(6)")
                        .HasColumnName("notificar_antes")
                        .HasDefaultValueSql("00:00:00");

                    b.Property<int>("Origem")
                        .HasColumnType("int")
                        .HasColumnName("origem");

                    b.Property<int?>("SubtipoEvento")
                        .HasColumnType("int")
                        .HasColumnName("subtipo_evento");

                    b.Property<int>("TipoEvento")
                        .HasColumnType("int")
                        .HasColumnName("tipo_evento");

                    b.Property<int?>("UsuarioAlteracaoId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_alteracao_id");

                    b.Property<int?>("UsuarioInclusaoId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_inclusao_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("SubtipoEvento");

                    b.HasIndex("TipoEvento");

                    b.ToTable("calendario_sindical_tb", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.CalendarioSindicais.Usuarios.Entities.CalendarioSindicalUsuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Comentarios")
                        .HasColumnType("longtext")
                        .HasColumnName("comentarios");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_hora");

                    b.Property<DateTime>("DataInclusao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("data_inclusao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("IdUsuario")
                        .HasColumnType("bigint")
                        .HasColumnName("id_usuario");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("local");

                    b.Property<TimeSpan?>("NotificarAntes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time(6)")
                        .HasColumnName("notificar_antes")
                        .HasDefaultValueSql("'00:00:00'");

                    b.Property<int?>("Recorrencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("recorrencia");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("titulo");

                    b.Property<DateTime?>("ValidadeRecorrencia")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("validade_recorrencia");

                    b.Property<bool>("Visivel")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("visivel");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("calendario_sindical_usuario_tb", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.CctsFases.Entities.FasesCct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_fase");

                    b.Property<string>("Fase")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("fase_negociacao");

                    b.Property<int?>("Periodicidade")
                        .HasColumnType("int")
                        .HasColumnName("periodicidade");

                    b.Property<int?>("Prioridade")
                        .HasColumnType("int")
                        .HasColumnName("prioridade");

                    b.Property<int?>("Tipo")
                        .HasColumnType("int")
                        .HasColumnName("tipo_fase");

                    b.HasKey("Id");

                    b.ToTable("fase_cct", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.Clausulas.Entities.ClausulaGeral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_clau");

                    b.Property<string>("Aprovado")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("aprovado")
                        .HasDefaultValueSql("nao");

                    b.Property<int?>("AssuntoId")
                        .HasColumnType("int")
                        .HasColumnName("assunto_idassunto");

                    b.Property<DateOnly?>("DataAprovacao")
                        .HasColumnType("date")
                        .HasColumnName("data_aprovacao");

                    b.Property<DateOnly?>("DataProcessamento")
                        .HasColumnType("date")
                        .HasColumnName("data_processamento");

                    b.Property<int>("DocumentoSindicalId")
                        .HasColumnType("int")
                        .HasColumnName("doc_sind_id_documento");

                    b.Property<int>("EstruturaClausulaId")
                        .HasColumnType("int")
                        .HasColumnName("estrutura_id_estruturaclausula");

                    b.Property<string>("Liberado")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("liberado");

                    b.Property<int?>("Numero")
                        .HasColumnType("int")
                        .HasColumnName("numero_clausula");

                    b.Property<int?>("ResponsavelProcessamento")
                        .HasColumnType("int")
                        .HasColumnName("responsavel_processamento");

                    b.Property<int?>("SinonimoId")
                        .HasColumnType("int")
                        .HasColumnName("sinonimo_id");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tex_clau");

                    b.Property<int?>("UsuarioAprovadorId")
                        .HasColumnType("int")
                        .HasColumnName("aprovador");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("AssuntoId");

                    b.HasIndex("EstruturaClausulaId");

                    b.HasIndex("ResponsavelProcessamento");

                    b.HasIndex("SinonimoId");

                    b.HasIndex(new[] { "DocumentoSindicalId" }, "fk_clausula_geral_doc_sind1_idx");

                    b.ToTable("clausula_geral", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.ClientesMatriz.Entities.ClienteMatriz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_empresa");

                    b.Property<int>("AberturaNegociacao")
                        .HasColumnType("int")
                        .HasColumnName("abri_neg");

                    b.Property<string>("Bairro")
                        .HasMaxLength(95)
                        .HasColumnType("text")
                        .HasColumnName("bairro");

                    b.Property<string>("Cep")
                        .HasMaxLength(8)
                        .HasColumnType("text")
                        .HasColumnName("cep");

                    b.Property<string>("Cidade")
                        .HasMaxLength(145)
                        .HasColumnType("text")
                        .HasColumnName("cidade");

                    b.Property<string>("ClasseDocumento")
                        .HasMaxLength(100)
                        .HasColumnType("text")
                        .HasColumnName("classe_doc");

                    b.Property<string>("Cnpj")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cnpj_empresa");

                    b.Property<string>("Codigo")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("codigo_empresa");

                    b.Property<int>("DataCorteForpag")
                        .HasColumnType("int")
                        .HasColumnName("data_cortefopag");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_inativacao");

                    b.Property<DateTime>("DataInclusao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("data_inclusao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("GrupoEconomicoId")
                        .HasColumnType("int")
                        .HasColumnName("cliente_grupo_id_grupo_economico");

                    b.Property<string>("Logo")
                        .HasMaxLength(200)
                        .HasColumnType("text")
                        .HasColumnName("logo_empresa");

                    b.Property<string>("Logradouro")
                        .HasMaxLength(150)
                        .HasColumnType("text")
                        .HasColumnName("logradouro_empresa");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)")
                        .HasColumnName("nome_empresa");

                    b.Property<string>("RazaoSocial")
                        .HasMaxLength(115)
                        .HasColumnType("varchar(115)")
                        .HasColumnName("razao_social");

                    b.Property<string>("SlaEntrega")
                        .HasMaxLength(2)
                        .HasColumnType("text")
                        .HasColumnName("sla_entrega");

                    b.Property<string>("SlaPrioridade")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("text")
                        .HasColumnName("sla_prioridade");

                    b.Property<int>("TipoProcessamento")
                        .HasMaxLength(45)
                        .HasColumnType("int")
                        .HasColumnName("tipo_processamento");

                    b.Property<string>("Uf")
                        .HasMaxLength(2)
                        .HasColumnType("text")
                        .HasColumnName("uf");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GrupoEconomicoId" }, "cliente_grupo_id_grupo_economico");

                    b.ToTable("cliente_matriz", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.ClientesUnidades.Entities.ClienteUnidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_unidade");

                    b.Property<int?>("CnaeFilial")
                        .HasColumnType("int")
                        .HasColumnName("cnae_filial");

                    b.Property<string>("CnaesUnidades")
                        .HasColumnType("json")
                        .HasColumnName("cnae_unidade");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("codigo_unidade");

                    b.Property<string>("CodigoSindicatoCliente")
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("cod_sindcliente");

                    b.Property<string>("CodigoSindicatoPatronal")
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("cod_sindpatrocliente");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("DATETIME")
                        .HasColumnName("data_alteracao");

                    b.Property<DateOnly?>("DataAusencia")
                        .HasColumnType("date")
                        .HasColumnName("data_inativo");

                    b.Property<DateTime?>("DataInclusao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("data_inclusao")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int")
                        .HasColumnName("cliente_matriz_id_empresa");

                    b.Property<int>("GrupoEconomicoId")
                        .HasColumnType("int")
                        .HasColumnName("cliente_grupo_id_grupo_economico");

                    b.Property<int>("LocalizacaoId")
                        .HasColumnType("int")
                        .HasColumnName("localizacao_id_localizacao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("varchar(65)")
                        .HasColumnName("nome_unidade");

                    b.Property<string>("NomeEmpresa")
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)")
                        .HasColumnName("nome_empresa");

                    b.Property<string>("NomeGrupoEconomico")
                        .HasColumnType("text")
                        .HasColumnName("nome_grupoeconomico");

                    b.Property<int>("TipoNegocioId")
                        .HasColumnType("int")
                        .HasColumnName("tipounidade_cliente_id_tiponegocio");

                    b.Property<int?>("UsuarioAlteracaoId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_alteracao_id");

                    b.Property<int?>("UsuarioInclusaoId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_inclusao_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "EmpresaId" }, "cliente_matriz_id_empresa");

                    b.HasIndex(new[] { "LocalizacaoId" }, "localizacao_id_localizacao");

                    b.HasIndex(new[] { "TipoNegocioId" }, "tipounidade_cliente_id_tiponegocio");

                    b.ToTable("cliente_unidades", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.ClientesUnidadesSindicatosPatronais.Entities.ClienteUnidadeSindicatoPatronal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<int>("ClienteUnidadeId")
                        .HasColumnType("int")
                        .HasColumnName("cliente_unidade_id");

                    b.Property<int>("SindicatoPatronalId")
                        .HasColumnType("int")
                        .HasColumnName("sindicato_patronal_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("ClienteUnidadeId");

                    b.HasIndex("SindicatoPatronalId");

                    b.ToTable("cliente_unidade_sindicato_patronal_tb", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.Cnaes.Entities.Cnae", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_cnae");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("categoria");

                    b.Property<string>("DescricaoDivisao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descricao_divisão");

                    b.Property<string>("DescricaoSubClasse")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descricao_subclasse");

                    b.Property<int>("Divisao")
                        .HasColumnType("int")
                        .HasColumnName("divisao_cnae");

                    b.Property<int>("SubClasse")
                        .HasColumnType("int")
                        .HasColumnName("subclasse_cnae");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("classe_cnae", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.Comentarios.Entities.Comentario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("DATETIME")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime?>("DataInclusao")
                        .HasColumnType("DATETIME")
                        .HasColumnName("data_inclusao");

                    b.Property<DateOnly?>("DataValidade")
                        .HasColumnType("date")
                        .HasColumnName("data_validade");

                    b.Property<long>("EtiquetaId")
                        .HasMaxLength(70)
                        .HasColumnType("bigint")
                        .HasColumnName("etiqueta_id");

                    b.Property<int>("ReferenciaId")
                        .HasColumnType("int")
                        .HasColumnName("referencia_id");

                    b.Property<int>("Tipo")
                        .HasColumnType("int")
                        .HasColumnName("tipo");

                    b.Property<int>("TipoNotificacao")
                        .HasColumnType("int")
                        .HasColumnName("tipo_notificacao");

                    b.Property<int>("TipoUsuarioDestino")
                        .HasColumnType("int")
                        .HasColumnName("tipo_usuario_destino");

                    b.Property<int?>("UsuarioAlteracaoId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_alteracao_id");

                    b.Property<int>("UsuarioDestionoId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_destino_id");

                    b.Property<int?>("UsuarioInclusaoId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_inclusao_id");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("valor");

                    b.Property<int>("Visivel")
                        .HasColumnType("int")
                        .HasColumnName("visivel");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("EtiquetaId");

                    b.ToTable("comentarios_tb", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.DirigentesPatronais.Entities.DirigentePatronal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_diretoriap");

                    b.Property<DateOnly>("DataFimMandato")
                        .HasColumnType("date")
                        .HasColumnName("termino_mandatop");

                    b.Property<DateOnly>("DataInicioMandato")
                        .HasColumnType("date")
                        .HasColumnName("inicio_mandatop");

                    b.Property<int?>("EstabelecimentoId")
                        .HasColumnType("int")
                        .HasColumnName("cliente_unidades_id_unidade");

                    b.Property<string>("Funcao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("funcao_p");

                    b.Property<int?>("MatrizId")
                        .HasColumnType("int")
                        .HasColumnName("cliente_matriz_id_empresa");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(145)
                        .HasColumnType("varchar(145)")
                        .HasColumnName("dirigente_p");

                    b.Property<int>("SindicatoPatronalId")
                        .HasColumnType("int")
                        .HasColumnName("sind_patr_id_sindp");

                    b.Property<string>("Situacao")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("situacao_p");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("EstabelecimentoId");

                    b.HasIndex(new[] { "SindicatoPatronalId" }, "fk_sind_dirpatro_sind_patr1");

                    b.ToTable("sind_dirpatro", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.DocumentosLocalizados.Entities.DocumentoLocalizado", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_documento");

                    b.Property<string>("CaminhoArquivo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("caminho");

                    b.Property<DateOnly?>("DataAprovacao")
                        .HasColumnType("date")
                        .HasColumnName("data_aprovacao");

                    b.Property<DateTime>("DataRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("data_registro")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long?>("IdLegado")
                        .HasColumnType("bigint")
                        .HasColumnName("id_legado");

                    b.Property<string>("NomeDocumento")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nome_documento");

                    b.Property<string>("Origem")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("origem");

                    b.Property<string>("Referenciado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("referenciado")
                        .HasDefaultValueSql("'não'");

                    b.Property<string>("Situacao")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("situacao")
                        .HasDefaultValueSql("'não aprovado'");

                    b.Property<string>("Uf")
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("uf");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("documentos_localizados", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.DocumentosSindicais.Dtos.Cnae", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Subclasse")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Cnae");
                });

            modelBuilder.Entity("Ineditta.Application.DocumentosSindicais.Dtos.SindicatoPatronal", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Cnpj")
                        .HasColumnType("longtext");

                    b.Property<string>("Codigo")
                        .HasColumnType("longtext");

                    b.Property<string>("Denominacao")
                        .HasColumnType("longtext");

                    b.Property<string>("Municipio")
                        .HasColumnType("longtext");

                    b.Property<string>("Sigla")
                        .HasColumnType("longtext");

                    b.Property<string>("Uf")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SindicatoPatronal");
                });

            modelBuilder.Entity("Ineditta.Application.DocumentosSindicais.Entities.DocumentoSindical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_doc");

                    b.Property<string>("Abrangencias")
                        .HasColumnType("json")
                        .HasColumnName("abrangencia");

                    b.Property<string>("Anuencia")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("anuencia");

                    b.Property<string>("CaminhoArquivo")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("caminho_arquivo");

                    b.Property<string>("Cnaes")
                        .HasColumnType("json")
                        .HasColumnName("cnae_doc");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("DATETIME")
                        .HasColumnName("data_alteracao");

                    b.Property<DateOnly?>("DataAprovacao")
                        .HasColumnType("date")
                        .HasColumnName("data_aprovacao");

                    b.Property<DateOnly?>("DataAssinatura")
                        .HasColumnType("date")
                        .HasColumnName("data_assinatura");

                    b.Property<DateOnly?>("DataAtualizacao")
                        .HasColumnType("date")
                        .HasColumnName("data_atualizacao");

                    b.Property<DateOnly?>("DataCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("data_cadastro")
                        .HasDefaultValueSql("'0000-00-00'");

                    b.Property<DateTime?>("DataInclusao")
                        .HasColumnType("DATETIME")
                        .HasColumnName("data_inclusao");

                    b.Property<DateOnly?>("DataLiberacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("data_liberacao_clausulas")
                        .HasDefaultValueSql("'0000-00-00'");

                    b.Property<DateOnly?>("DataProrrogacao")
                        .HasColumnType("date")
                        .HasColumnName("prorrogacao_doc");

                    b.Property<DateOnly?>("DataRegistroMTE")
                        .HasColumnType("date")
                        .HasColumnName("data_reg_mte");

                    b.Property<DateOnly?>("DataScrap")
                        .HasColumnType("date")
                        .HasColumnName("data_scrap");

                    b.Property<DateOnly?>("DataSla")
                        .HasColumnType("date")
                        .HasColumnName("data_sla");

                    b.Property<DateTime>("DataUpload")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("data_upload")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateOnly?>("DataValidadeFinal")
                        .HasColumnType("date")
                        .HasColumnName("validade_final");

                    b.Property<DateOnly>("DataValidadeInicial")
                        .HasColumnType("date")
                        .HasColumnName("validade_inicial");

                    b.Property<string>("Database")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("database_doc");

                    b.Property<string>("Descricao")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("descricao_documento");

                    b.Property<int?>("DocumentoLocalizacaoId")
                        .HasColumnType("int")
                        .HasColumnName("documento_id_documento");

                    b.Property<string>("Estabelecimentos")
                        .HasColumnType("json")
                        .HasColumnName("cliente_estabelecimento");

                    b.Property<string>("FonteWeb")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("fonte_web");

                    b.Property<string>("FormularioComunicado")
                        .HasColumnType("json")
                        .HasColumnName("formulario_comunicado");

                    b.Property<string>("Modulo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("modulo")
                        .HasDefaultValueSql("''");

                    b.Property<string>("NomeArquivo")
                        .HasColumnType("longtext")
                        .HasColumnName("nome_arquivo");

                    b.Property<string>("NumeroLei")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("numero_lei");

                    b.Property<string>("NumeroRegistroMTE")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("num_reg_mte")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("NumeroRegistroMTE"), "utf8mb3");

                    b.Property<string>("NumeroSolicitacao")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("numero_solicitacao_mr")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("NumeroSolicitacao"), "utf8mb3");

                    b.Property<string>("Observacao")
                        .HasColumnType("text")
                        .HasColumnName("observacao")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Observacao"), "utf8mb3");

                    b.Property<string>("Origem")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("origem")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Origem"), "utf8mb3");

                    b.Property<string>("Permissao")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("permissao")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Permissao"), "utf8mb3");

                    b.Property<string>("Referencias")
                        .HasColumnType("json")
                        .HasColumnName("referencia");

                    b.Property<string>("Restrito")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("doc_restrito")
                        .HasDefaultValueSql("'Não'");

                    b.Property<string>("ScrapAprovado")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("scrap_aprovado");

                    b.Property<string>("SindicatosLaborais")
                        .HasColumnType("json")
                        .HasColumnName("sind_laboral");

                    b.Property<string>("SindicatosPatronais")
                        .HasColumnType("json")
                        .HasColumnName("sind_patronal");

                    b.Property<string>("SlaEntrega")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("sla_entrega");

                    b.Property<string>("Status")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("status");

                    b.Property<int>("TipoDocumentoId")
                        .HasColumnType("int")
                        .HasColumnName("tipo_doc_idtipo_doc");

                    b.Property<int?>("TipoNegocioId")
                        .HasColumnType("int")
                        .HasColumnName("tipounidade_cliente_id_tiponegocio");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("titulo_documento")
                        .HasDefaultValueSql("''");

                    b.Property<string>("Uf")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("uf");

                    b.Property<int?>("UsuarioAdmnistradorId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_adm_id_usuario");

                    b.Property<int?>("UsuarioAlteracaoId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_alteracao_id");

                    b.Property<int?>("UsuarioAprovadorId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_aprovador");

                    b.Property<int?>("UsuarioCadastroId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_cadastro");

                    b.Property<int?>("UsuarioInclusaoId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_inclusao_id");

                    b.Property<int?>("UsuarioResponsavelId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_responsavel");

                    b.Property<string>("Versao")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("versao_documento")
                        .HasDefaultValueSql("''");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("TipoNegocioId");

                    b.ToTable("doc_sind", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.DocumentosSindicatosLaborais.DocumentoSindicatoLaboral", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<int>("DocumentoSindicalId")
                        .HasColumnType("int")
                        .HasColumnName("documento_id");

                    b.Property<int>("SindicatoLaboralId")
                        .HasColumnType("int")
                        .HasColumnName("sindicato_laboral_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("SindicatoLaboralId");

                    b.HasIndex("DocumentoSindicalId", "SindicatoLaboralId")
                        .IsUnique()
                        .HasDatabaseName("ix001_documento_sindicato_laboral_tb");

                    b.ToTable("documento_sindicato_laboral_tb", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.DocumentosSindicatosPatronais.DocumentoSindicatoPatronal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<int>("DocumentoSindicalId")
                        .HasColumnType("int")
                        .HasColumnName("documento_id");

                    b.Property<int>("SindicatoPatronalId")
                        .HasColumnType("int")
                        .HasColumnName("sindicato_patronal_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("SindicatoPatronalId");

                    b.HasIndex("DocumentoSindicalId", "SindicatoPatronalId")
                        .IsUnique()
                        .HasDatabaseName("ix001_documento_sindicato_patronal_tb");

                    b.ToTable("documento_sindicato_patronal_tb", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.Emails.CaixasDeSaida.Entities.EmailCaixaDeSaida", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Assunto")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("assunto");

                    b.Property<DateOnly>("DataInclusao")
                        .HasColumnType("date")
                        .HasColumnName("data_inclusao");

                    b.Property<string>("MessageId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("message_id");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("template");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("email_caixa_de_saida_tb", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.Emails.StoragesManagers.Entities.EmailStorageManager", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Assunto")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("assunto");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_inclusao");

                    b.Property<int>("Enviado")
                        .HasColumnType("int")
                        .HasColumnName("enviado");

                    b.Property<string>("MessageId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("message_id");

                    b.Property<string>("RequestData")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("")
                        .HasColumnName("request_data");

                    b.HasKey("Id");

                    b.ToTable("email_storage_manager_tb", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.Etiquetas.Entities.Etiqueta", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.Property<long>("TipoEtiquetaId")
                        .HasColumnType("bigint")
                        .HasColumnName("tipo_etiqueta_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("TipoEtiquetaId");

                    b.ToTable("etiqueta_tb", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.GruposEconomicos.Entities.GrupoEconomico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_grupo_economico");

                    b.Property<string>("Logotipo")
                        .HasColumnType("longtext")
                        .HasColumnName("logo_grupo");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome_grupoeconomico");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("cliente_grupo", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Application.AIs.DocumentosSindicais.Entities.IADocumentoSindical", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<int>("DocumentoReferenciaId")
                        .HasColumnType("int")
                        .HasColumnName("documento_referencia_id");

                    b.Property<string>("MotivoErro")
                        .HasColumnType("longtext")
                        .HasColumnName("motivo_erro");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("DocumentoReferenciaId");

                    b.ToTable("documento_sindical_tb", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.InformacoesAdicionais.Cliente.Entities.InformacaoAdicionalCliente", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("Aprovado")
                        .HasColumnType("int")
                        .HasColumnName("aprovado");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("DATETIME")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime?>("DataInclusao")
                        .HasColumnType("DATETIME")
                        .HasColumnName("data_inclusao");

                    b.Property<int>("DocumentoSindicalId")
                        .HasColumnType("int")
                        .HasColumnName("documento_sindical_id");

                    b.Property<int>("GrupoEconomicoId")
                        .HasColumnType("int")
                        .HasColumnName("grupo_economico_id");

                    b.Property<string>("InformacoesAdicionais")
                        .HasColumnType("json")
                        .HasColumnName("informacoes_adicionais");

                    b.Property<string>("ObservacoesAdicionais")
                        .HasColumnType("json")
                        .HasColumnName("observacoes_adicionais");

                    b.Property<string>("Orientacao")
                        .HasColumnType("LONGTEXT")
                        .HasColumnName("orientacao");

                    b.Property<string>("OutrasInformacoes")
                        .HasColumnType("LONGTEXT")
                        .HasColumnName("outras_informacoes");

                    b.Property<int?>("UsuarioAlteracaoId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_alteracao_id");

                    b.Property<int?>("UsuarioInclusaoId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_inclusao_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("GrupoEconomicoId");

                    b.HasIndex("DocumentoSindicalId", "GrupoEconomicoId")
                        .IsUnique()
                        .HasDatabaseName("uk001_informacao_adicional_cliente_tb");

                    b.ToTable("informacao_adicional_cliente_tb", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.InformacoesAdicionais.Sisap.Entities.InformacaoAdicionalSisap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_clausulageral_estrutura_clausula");

                    b.Property<int>("ClausulaGeralId")
                        .HasColumnType("int")
                        .HasColumnName("clausula_geral_id_clau");

                    b.Property<string>("Combo")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("combo");

                    b.Property<string>("Data")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("data");

                    b.Property<string>("Descricao")
                        .HasColumnType("text")
                        .HasColumnName("descricao");

                    b.Property<int>("DocumentoSindicalId")
                        .HasColumnType("int")
                        .HasColumnName("doc_sind_id_doc");

                    b.Property<int>("EstruturaClausulaId")
                        .HasColumnType("int")
                        .HasColumnName("estrutura_clausula_id_estruturaclausula");

                    b.Property<string>("Hora")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("hora");

                    b.Property<int>("InforamcacaoAdicionalGrupoId")
                        .HasColumnType("int")
                        .HasColumnName("id_info_tipo_grupo");

                    b.Property<int>("NomeInformacaoEstruturaClausulaId")
                        .HasColumnType("int")
                        .HasColumnName("nome_informacao");

                    b.Property<decimal?>("Numerico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0.00m)
                        .HasColumnName("numerico");

                    b.Property<decimal?>("Percentual")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0.00m)
                        .HasColumnName("percentual");

                    b.Property<int>("SequenciaItem")
                        .HasColumnType("int")
                        .HasColumnName("sequencia");

                    b.Property<int>("SequenciaLinha")
                        .HasMaxLength(2)
                        .HasColumnType("int")
                        .HasColumnName("grupo_dados");

                    b.Property<string>("Texto")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("texto");

                    b.Property<int>("TipoinformacaoadicionalId")
                        .HasColumnType("int")
                        .HasColumnName("ad_tipoinformacaoadicional_cdtipoinformacaoadicional");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("ClausulaGeralId");

                    b.HasIndex("DocumentoSindicalId");

                    b.HasIndex("EstruturaClausulaId");

                    b.HasIndex("InforamcacaoAdicionalGrupoId");

                    b.HasIndex("NomeInformacaoEstruturaClausulaId");

                    b.HasIndex("TipoinformacaoadicionalId");

                    b.ToTable("clausula_geral_estrutura_clausula", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.Jornada.Entities.Jornada", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_jornada");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext")
                        .HasColumnName("descricao");

                    b.Property<int>("IsDeault")
                        .HasColumnType("int")
                        .HasColumnName("is_default");

                    b.Property<string>("JornadaSemanal")
                        .HasColumnType("json")
                        .HasColumnName("jornada_semanal");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("jornada", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Application.Localizacoes.Entities.Localizacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_localizacao");

                    b.Property<string>("CodMunicipio")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cod_municipio");

                    b.Property<string>("CodPais")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cod_pais");

                    b.Property<string>("CodRegiao")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cod_regiao");

                    b.Property<string>("CodUf")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cod_uf");

                    b.Property<string>("Municipio")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("municipio");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("localizacao", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Application.Modulos.Entities.Modulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_modulos");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("varchar(55)")
                        .HasColumnName("modulos");

                    b.Property<string>("PermiteAlterar")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("alterar");

                    b.Property<string>("PermiteAprovar")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("aprovar");

                    b.Property<string>("PermiteComentar")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("comentar");

                    b.Property<string>("PermiteConsultar")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("consultar");

                    b.Property<string>("PermiteCriar")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("criar");

                    b.Property<string>("PermiteExcluir")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("excluir");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("tipo")
                        .HasDefaultValueSql("'Comercial'");

                    b.Property<string>("Uri")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("uri");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("modulos", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.ModulosClientes.Entities.ModuloCliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idmodulo_cliente");

                    b.Property<int>("ClienteMatrizId")
                        .HasColumnType("int")
                        .HasColumnName("cliente_matriz_id_empresa");

                    b.Property<DateOnly?>("DataFim")
                        .HasColumnType("date")
                        .HasColumnName("data_fim");

                    b.Property<DateOnly>("DataInicio")
                        .HasColumnType("date")
                        .HasColumnName("data_inicio");

                    b.Property<int>("ModuloId")
                        .HasColumnType("int")
                        .HasColumnName("modulos_id_modulos");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ClienteMatrizId" }, "cliente_matriz_id_empresa")
                        .HasDatabaseName("cliente_matriz_id_empresa1");

                    b.HasIndex(new[] { "ModuloId" }, "modulos_id_modulos");

                    b.ToTable("modulos_cliente", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.NotificacaoEventos.Entities.Notificacao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("EventoId")
                        .HasColumnType("bigint")
                        .HasColumnName("evento_id");

                    b.Property<string>("Notificados")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("notificados");

                    b.Property<DateTime>("NotificadosEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("notificados_em")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("calendario_sindical_notificacao_tb", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.Sindicatos.Laborais.Entities.SindicatoLaboral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_sinde");

                    b.Property<int?>("CentralSindicalId")
                        .HasColumnType("int")
                        .HasColumnName("central_sindical_id_centralsindical");

                    b.Property<int?>("ConfederacaoId")
                        .HasColumnType("int")
                        .HasColumnName("confederacao_id_associacao");

                    b.Property<string>("Contribuicao")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("contribuicao_sinde");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("DATETIME")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime?>("DataInclusao")
                        .HasColumnType("DATETIME")
                        .HasColumnName("data_inclusao");

                    b.Property<string>("Denominacao")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("denominacao_sinde");

                    b.Property<string>("Enquadramento")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("enquadramento_sinde");

                    b.Property<string>("Facebook")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("facebook_sinde");

                    b.Property<int?>("FederacaoId")
                        .HasColumnType("int")
                        .HasColumnName("federacao_id_associacao");

                    b.Property<string>("Grau")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("grau");

                    b.Property<string>("Instagram")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("instagram_sinde");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("varchar(155)")
                        .HasColumnName("logradouro_sinde");

                    b.Property<string>("Municipio")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("municipio_sinde");

                    b.Property<string>("Negociador")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("negociador_sinde");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("razaosocial_sinde");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("sigla_sinde");

                    b.Property<string>("Site")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("site_sinde");

                    b.Property<string>("Situacao")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("situacaocadastro_sinde");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("status");

                    b.Property<string>("Twitter")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("twitter_sinde");

                    b.Property<string>("Uf")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("uf_sinde");

                    b.Property<int?>("UsuarioAlteracaoId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_alteracao_id");

                    b.Property<int?>("UsuarioInclusaoId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_inclusao_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ConfederacaoId" }, "associacao_id_associacao");

                    b.HasIndex(new[] { "CentralSindicalId" }, "central_sindical_id_centralsindical");

                    b.HasIndex(new[] { "FederacaoId" }, "federacao_id_associacao");

                    b.ToTable("sind_emp", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Application.Sindicatos.Patronais.Entities.SindicatoPatronal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_sindp");

                    b.Property<int?>("ConfederacaoId")
                        .HasColumnType("int")
                        .HasColumnName("confederacao_id_associacao");

                    b.Property<string>("Contribuicao")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("contribuicao_sp");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("DATETIME")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime?>("DataInclusao")
                        .HasColumnType("DATETIME")
                        .HasColumnName("data_inclusao");

                    b.Property<string>("Denominacao")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("denominacao_sp");

                    b.Property<string>("Enquadramento")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("enquadramento_sp");

                    b.Property<string>("Facebook")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("facebook_sp");

                    b.Property<int?>("FederacaoId")
                        .HasColumnType("int")
                        .HasColumnName("federacao_id_associacao");

                    b.Property<string>("Grau")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("grau_sp");

                    b.Property<string>("Instagram")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("instagram_sp");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("varchar(155)")
                        .HasColumnName("logradouro_sp");

                    b.Property<string>("Municipio")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("municipio_sp");

                    b.Property<string>("Negociador")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("negociador_sp");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("razaosocial_sp");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("sigla_sp");

                    b.Property<string>("Site")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("site_sp");

                    b.Property<string>("Situacao")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("situacaocadastro_sp");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("status");

                    b.Property<string>("Twitter")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("twitter_sp");

                    b.Property<string>("Uf")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("uf_sp");

                    b.Property<int?>("UsuarioAlteracaoId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_alteracao_id");

                    b.Property<int?>("UsuarioInclusaoId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_inclusao_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ConfederacaoId" }, "confederacao_id_associacao");

                    b.HasIndex(new[] { "FederacaoId" }, "federacao_id_associacao")
                        .HasDatabaseName("federacao_id_associacao1");

                    b.ToTable("sind_patr", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Application.SubtiposEventosCalendarioSindical.Entities.SubtipoEventoCalendarioSindical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nome");

                    b.Property<int>("TipoEventoId")
                        .HasColumnType("int")
                        .HasColumnName("tipo_evento_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("TipoEventoId");

                    b.ToTable("subtipo_evento_calendario_sindical", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.TemplatesEmails.Entities.TemplateEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Html")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("html");

                    b.Property<int>("Nivel")
                        .HasColumnType("int")
                        .HasColumnName("nivel");

                    b.Property<int>("ReferenciaId")
                        .HasColumnType("int")
                        .HasColumnName("referencia_id");

                    b.Property<int>("TipoTemplate")
                        .HasColumnType("int")
                        .HasColumnName("tipo_template");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("template_email_tb", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.TiposDocumentos.Entities.TipoDocumento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idtipo_doc");

                    b.Property<string>("Abrangencia")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("abrangencia");

                    b.Property<string>("Anuencia")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("anuencia");

                    b.Property<string>("Assunto")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("refer_assunto");

                    b.Property<string>("AtividadeEconomica")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("atividade_economica");

                    b.Property<string>("DataBase")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("data_base");

                    b.Property<string>("Descricao")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("descricao_doc");

                    b.Property<string>("Estabelecimento")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("estabelecimento");

                    b.Property<string>("FonteLegislacao")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("fonte_leg");

                    b.Property<string>("Grupo")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("tipo_doc");

                    b.Property<string>("ModuloCadastro")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("modulo_cad");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("nome_doc");

                    b.Property<string>("NumeroLegislacao")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("numero_leg");

                    b.Property<string>("Origem")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("origem");

                    b.Property<string>("Permissao")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("permissao")
                        .HasDefaultValueSql("'sim'");

                    b.Property<string>("PermitirCompartilhar")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("permitir_compartilhar");

                    b.Property<string>("Processado")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("processado");

                    b.Property<string>("Sigla")
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("sigla_doc");

                    b.Property<string>("SindicatoLaboral")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("sind_laboral");

                    b.Property<string>("SindicatoPatronal")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("sind_patronal");

                    b.Property<string>("TipoUnidadeCliente")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("tipo_unid_cliente");

                    b.Property<string>("ValidadeFinal")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("validade_final");

                    b.Property<string>("ValidadeInicial")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("validade_inicial");

                    b.Property<string>("Versao")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("versao");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tipo_doc", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.TiposDocumentosClientesMatriz.Entities.TipoDocumentoClienteMatriz", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<int>("ClienteMatrizId")
                        .HasColumnType("int")
                        .HasColumnName("cliente_matriz_id");

                    b.Property<int>("TipoDocumentoId")
                        .HasColumnType("int")
                        .HasColumnName("tipo_documento_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("ClienteMatrizId");

                    b.HasIndex("TipoDocumentoId");

                    b.ToTable("tipo_documento_cliente_matriz", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.TiposEtiquetas.Entities.TipoEtiqueta", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tipo_etiqueta_tb", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.TiposEventosCalendarioSindical.Entities.TipoEventoCalendarioSindical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nome");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tipo_evento_calendario_sindical", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.Usuarios.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_user");

                    b.Property<int>("AdmGlobal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("adm_global")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("Bloqueado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("is_blocked")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)")
                        .HasColumnName("cargo");

                    b.Property<string>("Celular")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telefone");

                    b.Property<string>("CnaesIds")
                        .HasColumnType("json")
                        .HasColumnName("ids_cnae");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("DATETIME")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime?>("DataInclusao")
                        .HasColumnType("DATETIME")
                        .HasColumnName("data_inclusao");

                    b.Property<string>("Departamento")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("departamento");

                    b.Property<int>("DocumentoRestrito")
                        .HasColumnType("int")
                        .HasColumnName("documento_restrito");

                    b.Property<string>("EstabelecimentosIds")
                        .HasColumnType("json")
                        .HasColumnName("ids_fmge");

                    b.Property<string>("Foto")
                        .HasColumnType("longtext")
                        .HasColumnName("foto");

                    b.Property<int?>("GrupoEconomicoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_grupoecon")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("GruposClausulasIds")
                        .HasColumnType("json")
                        .HasColumnName("ids_gruc");

                    b.Property<int?>("IdSuperior")
                        .HasColumnType("int")
                        .HasColumnName("id_user_superior");

                    b.Property<int?>("JornadaId")
                        .HasColumnType("int")
                        .HasColumnName("id_jornada_jornada");

                    b.Property<string>("LocalidadesIds")
                        .HasColumnType("json")
                        .HasColumnName("ids_localidade");

                    b.Property<string>("ModulosComerciais")
                        .HasColumnType("json")
                        .HasColumnName("modulos_comercial");

                    b.Property<string>("ModulosSISAP")
                        .HasColumnType("json")
                        .HasColumnName("modulos_sisap");

                    b.Property<string>("Nivel")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("nivel")
                        .HasDefaultValueSql("'Ineditta'");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(145)
                        .HasColumnType("varchar(145)")
                        .HasColumnName("nome_usuario");

                    b.Property<int>("NotificarEmail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notifica_email")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("NotificarWhatsapp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notifica_whatsapp")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Ramal")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ramal");

                    b.Property<string>("SenhaAdm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasColumnName("senha_adm")
                        .HasDefaultValueSql("'Ineditta@10'");

                    b.Property<string>("Tipo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("tipo")
                        .HasDefaultValueSql("'Ineditta'");

                    b.Property<int>("TrocaSenhaLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("troca_senha_login")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("UsuarioAlteracaoId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_alteracao_id");

                    b.Property<int?>("UsuarioInclusaoId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_inclusao_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "JornadaId" }, "id_jornada_jornada");

                    b.HasIndex(new[] { "IdSuperior" }, "id_user_superior");

                    b.ToTable("usuario_adm", (string)null);
                });

            modelBuilder.Entity("Ineditta.Application.UsuariosTiposEventosCalendarioSindical.Entities.UsuarioTipoEventoCalendarioSindical", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("NotificarAntes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time(6)")
                        .HasColumnName("notificar_antes")
                        .HasDefaultValueSql("'120:00:00'");

                    b.Property<bool>("NotificarEmail")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("notificar_email");

                    b.Property<bool>("NotificarWhatsapp")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("notificar_whatsapp");

                    b.Property<int?>("SubtipoEventoId")
                        .HasColumnType("int")
                        .HasColumnName("subtipo_evento_id");

                    b.Property<int>("TipoEventoId")
                        .HasColumnType("int")
                        .HasColumnName("tipo_evento_id");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("SubtipoEventoId");

                    b.HasIndex("TipoEventoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("usuario_tipo_evento_calendario_sindical", (string)null);
                });

            modelBuilder.Entity("Ineditta.BuildingBlocks.Core.Idempotency.Database.IdempotentModel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DataProcessamento")
                        .HasColumnType("DATETIME")
                        .HasColumnName("data_processamento");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id")
                        .HasName("pk_idempotent_tb");

                    b.ToTable("idempotent_tb", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.Acompanhamentos.Ccts.Views.AcompanhamentosCcts.AcompanhamentoCctVw", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("AtividadesEconomicas")
                        .HasColumnType("longtext")
                        .HasColumnName("atividades_economicas");

                    b.Property<decimal?>("DadoReal")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("dado_real");

                    b.Property<string>("DataBase")
                        .HasColumnType("longtext")
                        .HasColumnName("data_base");

                    b.Property<DateOnly?>("DataProcessamento")
                        .HasColumnType("date")
                        .HasColumnName("data_processamento");

                    b.Property<string>("Fase")
                        .HasColumnType("longtext")
                        .HasColumnName("fase");

                    b.Property<long?>("FaseId")
                        .HasColumnType("bigint")
                        .HasColumnName("fase_id");

                    b.Property<string>("IdsCnaes")
                        .HasColumnType("longtext")
                        .HasColumnName("ids_cnaes");

                    b.Property<string>("Indicador")
                        .HasColumnType("longtext")
                        .HasColumnName("indicador");

                    b.Property<string>("IrPeriodo")
                        .HasColumnType("longtext")
                        .HasColumnName("ir_periodo");

                    b.Property<string>("NomeDocumento")
                        .HasColumnType("longtext")
                        .HasColumnName("nome_documento");

                    b.Property<string>("ObservacoesGerais")
                        .HasColumnType("longtext")
                        .HasColumnName("observacoes_gerais");

                    b.Property<string>("PeriodoAnterior")
                        .HasColumnType("longtext")
                        .HasColumnName("periodo_anterior");

                    b.Property<string>("SindicatosLaboraisCnpjs")
                        .HasColumnType("longtext")
                        .HasColumnName("sindicatos_laborais_cnpjs");

                    b.Property<string>("SindicatosLaboraisCodigos")
                        .HasColumnType("longtext")
                        .HasColumnName("sindicatos_laborais_codigos");

                    b.Property<string>("SindicatosLaboraisIds")
                        .HasColumnType("longtext")
                        .HasColumnName("sindicatos_laborais_ids");

                    b.Property<string>("SindicatosLaboraisSiglas")
                        .HasColumnType("longtext")
                        .HasColumnName("sindicatos_laborais_siglas");

                    b.Property<string>("SindicatosLaboraisUfs")
                        .HasColumnType("longtext")
                        .HasColumnName("sindicatos_laborais_ufs");

                    b.Property<string>("SindicatosPatronaisCnpjs")
                        .HasColumnType("longtext")
                        .HasColumnName("sindicatos_patronais_cnpjs");

                    b.Property<string>("SindicatosPatronaisCodigos")
                        .HasColumnType("longtext")
                        .HasColumnName("sindicatos_patronais_codigos");

                    b.Property<string>("SindicatosPatronaisIds")
                        .HasColumnType("longtext")
                        .HasColumnName("sindicatos_patronais_ids");

                    b.Property<string>("SindicatosPatronaisSiglas")
                        .HasColumnType("longtext")
                        .HasColumnName("sindicatos_patronais_siglas");

                    b.Property<string>("SindicatosPatronaisUfs")
                        .HasColumnType("longtext")
                        .HasColumnName("sindicatos_patronais_ufs");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.ToView("acompanhamento_cct_vw", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.Acompanhamentos.Ccts.Views.AcompanhamentosCctsFuturas.AcompanhamentoCctFuturasVw", b =>
                {
                    b.Property<int>("ClasseCnaeIdClasseCnae")
                        .HasColumnType("int")
                        .HasColumnName("classe_cnae_idclasse_cnae");

                    b.Property<string>("DataIni")
                        .HasColumnType("longtext")
                        .HasColumnName("data_ini");

                    b.Property<string>("Dataneg")
                        .HasColumnType("longtext")
                        .HasColumnName("dataneg");

                    b.Property<string>("DescricaoSubClasse")
                        .HasColumnType("longtext")
                        .HasColumnName("descricao_subclasse");

                    b.Property<string>("Responsavel")
                        .HasColumnType("longtext")
                        .HasColumnName("responsavel");

                    b.Property<int>("ResponsavelId")
                        .HasColumnType("int")
                        .HasColumnName("responsavel_id");

                    b.Property<string>("SiglaSinde")
                        .HasColumnType("longtext")
                        .HasColumnName("sigla_sinde");

                    b.Property<string>("SiglaSp")
                        .HasColumnType("longtext")
                        .HasColumnName("sigla_sp");

                    b.Property<int>("SindEmpregadosIdSinde")
                        .HasColumnType("int")
                        .HasColumnName("sind_empregados_id_sinde1");

                    b.Property<int>("SindPatronalIdSindp")
                        .HasColumnType("int")
                        .HasColumnName("sind_patronal_id_sindp");

                    b.ToTable((string)null);

                    b.ToView("acompanhamento_cct_futuras_vw", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.Acompanhamentos.Ccts.Views.AcompanhamentosCctsInclusoes.AcompanhamentoCctInclusaoVw", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_alteracao");

                    b.Property<string>("DataBase")
                        .HasColumnType("longtext")
                        .HasColumnName("data_base");

                    b.Property<DateOnly?>("DataFinal")
                        .HasColumnType("date")
                        .HasColumnName("data_final");

                    b.Property<DateOnly>("DataInicial")
                        .HasColumnType("date")
                        .HasColumnName("data_inicial");

                    b.Property<string>("DescricaoSubClasse")
                        .HasColumnType("longtext")
                        .HasColumnName("descricao_sub_classe");

                    b.Property<string>("Fase")
                        .HasColumnType("longtext")
                        .HasColumnName("fase");

                    b.Property<string>("NomeDocumento")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nome_documento");

                    b.Property<string>("NomeUsuario")
                        .HasColumnType("longtext")
                        .HasColumnName("nome_usuario");

                    b.Property<DateOnly?>("ProximaLigacao")
                        .HasColumnType("date")
                        .HasColumnName("proxima_ligacao");

                    b.Property<string>("SiglaSinditoLaboral")
                        .HasColumnType("longtext")
                        .HasColumnName("sigla_sindicato_empregado");

                    b.Property<string>("SiglaSinditoPatronal")
                        .HasColumnType("longtext")
                        .HasColumnName("sigla_sindicato_patronal");

                    b.Property<string>("Status")
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<string>("UfSinditoLaboral")
                        .HasColumnType("longtext")
                        .HasColumnName("uf_sindicato_empregado");

                    b.Property<string>("UfSinditoPatronal")
                        .HasColumnType("longtext")
                        .HasColumnName("uf_sindicato_patronal");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.ToView("acompanhamento_cct_inclusao_vw", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.AcompanhamentosCct.Views.AcompanhamentosCctsRelatorios.AcompanhamentoCctRelatorioVw", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("AtividadesEconomicas")
                        .HasColumnType("longtext")
                        .HasColumnName("atividades_economicas");

                    b.Property<decimal?>("DadoReal")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("dado_real");

                    b.Property<string>("DataBase")
                        .HasColumnType("longtext")
                        .HasColumnName("data_base");

                    b.Property<DateOnly?>("DataProcessamento")
                        .HasColumnType("date")
                        .HasColumnName("data_processamento");

                    b.Property<string>("Estabelecimentos")
                        .HasColumnType("json")
                        .HasColumnName("estabelecimentos");

                    b.Property<string>("Fase")
                        .HasColumnType("longtext")
                        .HasColumnName("fase");

                    b.Property<long?>("FaseId")
                        .HasColumnType("bigint")
                        .HasColumnName("fase_id");

                    b.Property<string>("Indicador")
                        .HasColumnType("longtext")
                        .HasColumnName("indicador");

                    b.Property<string>("IrPeriodo")
                        .HasColumnType("longtext")
                        .HasColumnName("ir_periodo");

                    b.Property<string>("Municipios")
                        .HasColumnType("json")
                        .HasColumnName("municipios");

                    b.Property<string>("NomeDocumento")
                        .HasColumnType("longtext")
                        .HasColumnName("nome_documento");

                    b.Property<string>("ObservacoesGerais")
                        .HasColumnType("longtext")
                        .HasColumnName("observacoes_gerais");

                    b.Property<string>("PeriodoAnterior")
                        .HasColumnType("longtext")
                        .HasColumnName("periodo_anterior");

                    b.Property<string>("SindicatosLaborais")
                        .HasColumnType("json")
                        .HasColumnName("sindicatos_laborais");

                    b.Property<string>("SindicatosPatronais")
                        .HasColumnType("json")
                        .HasColumnName("sindicatos_patronais");

                    b.Property<string>("Ufs")
                        .HasColumnType("json")
                        .HasColumnName("ufs");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.ToView("acompanhamento_cct_relatorio_vw", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.Audits.AuditTb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("json");

                    b.Property<DateTime>("DateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("NewValues")
                        .HasColumnType("json");

                    b.Property<string>("OldValues")
                        .HasColumnType("json");

                    b.Property<string>("PrimaryKey")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("audit_tb", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.BasesTerritoriaisLaborais.Views.BasesTerritoriaisLaboraisLocalizacoes.BasesTerritoriaisLaboraisLocalizacoesVw", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Municipio")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("municipio");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("pais");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("sigla");

                    b.Property<int>("SindicatoLaboralId")
                        .HasColumnType("int")
                        .HasColumnName("sindicato_laboral_id");

                    b.Property<string>("Uf")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("uf");

                    b.ToTable((string)null);

                    b.ToView("base_territorial_sindicato_laboral_localizacao", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.ClassesCnaes.Views.ClasseCnaeVw", b =>
                {
                    b.Property<string>("Categoria")
                        .HasColumnType("longtext")
                        .HasColumnName("categoria");

                    b.Property<string>("DescricaoSubclasse")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("descricao_subclasse");

                    b.Property<int>("Divisao")
                        .HasColumnType("int")
                        .HasColumnName("divisao");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("SiglasSindicatosLaborais")
                        .HasColumnType("longtext")
                        .HasColumnName("siglas_sindicatos_laborais");

                    b.Property<string>("SiglasSindicatosPatronais")
                        .HasColumnType("longtext")
                        .HasColumnName("siglas_sindicatos_patronais");

                    b.Property<int>("Subclasse")
                        .HasColumnType("int")
                        .HasColumnName("subclasse");

                    b.ToTable((string)null);

                    b.ToView("classe_cnae_vw", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.Clausulas.Views.ClausulaVw", b =>
                {
                    b.Property<string>("Aprovado")
                        .HasColumnType("longtext")
                        .HasColumnName("aprovado");

                    b.Property<string>("ClausulaGeralLiberada")
                        .HasColumnType("longtext")
                        .HasColumnName("clausula_geral_liberada");

                    b.Property<int?>("ClausulaId")
                        .HasColumnType("int")
                        .HasColumnName("clausula_id");

                    b.Property<string>("ClausulaTexto")
                        .HasColumnType("longtext")
                        .HasColumnName("clausula_texto");

                    b.Property<DateOnly?>("DataAprovacaoClausula")
                        .HasColumnType("date")
                        .HasColumnName("clausula_geral_data_aprovacao");

                    b.Property<DateOnly?>("DataAprovacaoDocumento")
                        .HasColumnType("date")
                        .HasColumnName("data_aprovacao");

                    b.Property<DateOnly?>("DataRegistro")
                        .HasColumnType("date")
                        .HasColumnName("data_registro");

                    b.Property<string>("DocumentoAbrangencia")
                        .HasColumnType("json")
                        .HasColumnName("documento_abrangencia");

                    b.Property<string>("DocumentoCnae")
                        .HasColumnType("json")
                        .HasColumnName("documento_cnae");

                    b.Property<string>("DocumentoDatabase")
                        .HasColumnType("longtext")
                        .HasColumnName("documento_database");

                    b.Property<string>("DocumentoEstabelecimento")
                        .HasColumnType("json")
                        .HasColumnName("documento_estabelecimento");

                    b.Property<int?>("DocumentoId")
                        .HasColumnType("int")
                        .HasColumnName("documento_id");

                    b.Property<string>("DocumentoNome")
                        .HasColumnType("longtext")
                        .HasColumnName("documento_nome");

                    b.Property<string>("DocumentoReferencia")
                        .HasColumnType("json")
                        .HasColumnName("documento_referencia");

                    b.Property<string>("DocumentoSindicatoLaboral")
                        .HasColumnType("json")
                        .HasColumnName("documento_sindicato_laboral");

                    b.Property<string>("DocumentoSindicatoPatronal")
                        .HasColumnType("json")
                        .HasColumnName("documento_sindicato_patronal");

                    b.Property<int?>("DocumentoTipoId")
                        .HasColumnType("int")
                        .HasColumnName("documento_tipo_id");

                    b.Property<DateOnly?>("DocumentoValidadeFinal")
                        .HasColumnType("date")
                        .HasColumnName("documento_validade_final");

                    b.Property<DateOnly?>("DocumentoValidadeInicial")
                        .HasColumnType("date")
                        .HasColumnName("documento_validade_inicial");

                    b.Property<int?>("EstruturaClausulaId")
                        .HasColumnType("int")
                        .HasColumnName("estrutura_clausula_id");

                    b.Property<string>("EstruturaClausulaNome")
                        .HasColumnType("longtext")
                        .HasColumnName("estrutura_clausula_nome");

                    b.Property<int?>("GrupoClausulaId")
                        .HasColumnType("int")
                        .HasColumnName("grupo_clausula_id");

                    b.Property<string>("GrupoClausulaNome")
                        .HasColumnType("longtext")
                        .HasColumnName("grupo_clausula_nome");

                    b.Property<int>("QuantidadeSindicatosLaborais")
                        .HasColumnType("int")
                        .HasColumnName("quantidade_sindicatos_laborais");

                    b.Property<int>("QuantidadeSindicatosPatronais")
                        .HasColumnType("int")
                        .HasColumnName("quantidade_sindicatos_patronais");

                    b.ToTable((string)null);

                    b.ToView("clausulas_vw", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.Clausulas.Views.ComparativoMapaSindical.ComparativoMapaSindicalItemVw", b =>
                {
                    b.Property<string>("Abrangencias")
                        .HasColumnType("json")
                        .HasColumnName("documento_abrangencia");

                    b.Property<string>("AtividadeEconomicas")
                        .HasColumnType("json")
                        .HasColumnName("documento_atividades_economicas");

                    b.Property<bool>("ClausulaAprovada")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("clausula_aprovada");

                    b.Property<DateOnly?>("ClausulaDataAprovacao")
                        .HasColumnType("date")
                        .HasColumnName("clausula_data_aprovacao");

                    b.Property<int>("ClausulaGeralEstruturaId")
                        .HasColumnType("int")
                        .HasColumnName("clausula_geral_estrutura_id");

                    b.Property<int>("ClausulaId")
                        .HasColumnType("int")
                        .HasColumnName("clausula_id");

                    b.Property<int>("ClausulaInformacaoNumero")
                        .HasColumnType("int")
                        .HasColumnName("clausula_grupo_informacao_adicional_nome");

                    b.Property<bool>("ClausulaLiberada")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("clausula_liberada");

                    b.Property<string>("ClausulaTexto")
                        .HasColumnType("longtext")
                        .HasColumnName("clausula_texto");

                    b.Property<string>("DataBase")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("documento_database");

                    b.Property<DateOnly?>("DocumentoDataAprovacao")
                        .HasColumnType("date")
                        .HasColumnName("documento_data_aprovacao");

                    b.Property<int>("DocumentoSindicalId")
                        .HasColumnType("int")
                        .HasColumnName("documento_sindical_id");

                    b.Property<string>("DocumentoSindicatosLaborais")
                        .HasColumnType("json")
                        .HasColumnName("documento_sindicatos_laborais");

                    b.Property<string>("DocumentoSindicatosPatronais")
                        .HasColumnType("json")
                        .HasColumnName("documento_sindicatos_patronais");

                    b.Property<string>("DocumentoTitulo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("documento_titulo");

                    b.Property<string>("DocumentoUf")
                        .HasColumnType("longtext")
                        .HasColumnName("documento_uf");

                    b.Property<DateOnly>("DocumentoValidadeFinal")
                        .HasColumnType("date")
                        .HasColumnName("documento_validade_final");

                    b.Property<DateOnly>("DocumentoValidadeInicial")
                        .HasColumnType("date")
                        .HasColumnName("documento_validade_inicial");

                    b.Property<string>("EstruturaClausulaTipo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("estrutura_clausula_tipo");

                    b.Property<bool>("ExibeComparativoMapaSindical")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("exibe_comparativo_mapa_sindical");

                    b.Property<int>("GrupoClausulaId")
                        .HasColumnType("int")
                        .HasColumnName("grupo_clausula_id");

                    b.Property<string>("GrupoClausulaNome")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("grupo_clausula_nome");

                    b.Property<int>("GrupoDados")
                        .HasColumnType("int")
                        .HasColumnName("grupo_dados");

                    b.Property<int>("InformacaoAdicionalId")
                        .HasColumnType("int")
                        .HasColumnName("informacao_adicional_id");

                    b.Property<string>("InformacaoAdicionalNome")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("informacao_adicional_nome");

                    b.Property<string>("InformacaoAdicionalTipoDado")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("informacao_adicional_tipo_dado");

                    b.Property<int>("Sequencia")
                        .HasColumnType("int")
                        .HasColumnName("sequencia");

                    b.Property<string>("TipoDocumentoNome")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tipo_documento_nome");

                    b.Property<string>("ValorCombo")
                        .HasColumnType("longtext")
                        .HasColumnName("valor_combo");

                    b.Property<DateOnly?>("ValorData")
                        .HasColumnType("date")
                        .HasColumnName("valor_data");

                    b.Property<string>("ValorDescricao")
                        .HasColumnType("longtext")
                        .HasColumnName("valor_descricao");

                    b.Property<string>("ValorHora")
                        .HasColumnType("longtext")
                        .HasColumnName("valor_hora");

                    b.Property<decimal?>("ValorNumerico")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("valor_numerico");

                    b.Property<decimal?>("ValorPercentual")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("valor_percentual");

                    b.Property<string>("ValorTexto")
                        .HasColumnType("longtext")
                        .HasColumnName("valor_texto");

                    b.ToTable((string)null);

                    b.ToView("comparativo_mapa_sindical_item_vw", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.Clausulas.Views.ComparativoMapaSindical.ComparativoMapaSindicalPrincipalVw", b =>
                {
                    b.Property<string>("Abrangencia")
                        .HasColumnType("json")
                        .HasColumnName("abrangencia");

                    b.Property<string>("Cnaes")
                        .HasColumnType("json")
                        .HasColumnName("cnaes");

                    b.Property<string>("CnaesSubclasses")
                        .HasColumnType("longtext")
                        .HasColumnName("cnaes_subclasses");

                    b.Property<DateOnly?>("DataAprovacao")
                        .HasColumnType("date")
                        .HasColumnName("data_aprovacao");

                    b.Property<DateTime?>("DataUpload")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_upload");

                    b.Property<string>("Database")
                        .HasColumnType("longtext")
                        .HasColumnName("data_base");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext")
                        .HasColumnName("descricao_documento");

                    b.Property<int>("DocumentoId")
                        .HasColumnType("int")
                        .HasColumnName("documento_id");

                    b.Property<string>("DocumentoNome")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("documento_nome");

                    b.Property<string>("Estabelecimentos")
                        .HasColumnType("json")
                        .HasColumnName("estabelecimentos");

                    b.Property<decimal>("IndiceProjetado")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("indice_projetado");

                    b.Property<int?>("InpcId")
                        .HasColumnType("int")
                        .HasColumnName("inpc_id");

                    b.Property<string>("SiglasSindicatosLaborais")
                        .HasColumnType("longtext")
                        .HasColumnName("siglas_sindicatos_laborais");

                    b.Property<string>("SiglasSindicatosPatronais")
                        .HasColumnType("longtext")
                        .HasColumnName("siglas_sindicatos_patronais");

                    b.Property<string>("SindicatosLaborais")
                        .HasColumnType("json")
                        .HasColumnName("sindicatos_laborais");

                    b.Property<string>("SindicatosPatronais")
                        .HasColumnType("json")
                        .HasColumnName("sindicatos_patronais");

                    b.Property<string>("Uf")
                        .HasColumnType("longtext")
                        .HasColumnName("uf");

                    b.Property<DateOnly?>("ValidadeFinal")
                        .HasColumnType("date")
                        .HasColumnName("validade_final");

                    b.Property<DateOnly?>("ValidadeInicial")
                        .HasColumnType("date")
                        .HasColumnName("validade_inicial");

                    b.ToTable((string)null);

                    b.ToView("comparativo_mapa_sindical_principal_vw", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.Clausulas.Views.InformacoesAdicionais.ClausulaGeralInformacaoAdicionalVw", b =>
                {
                    b.Property<string>("Abrangencias")
                        .HasColumnType("json")
                        .HasColumnName("documento_abrangencia");

                    b.Property<string>("AtividadeEconomicas")
                        .HasColumnType("json")
                        .HasColumnName("documento_atividades_economicas");

                    b.Property<bool>("ClausulaAprovada")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("clausula_aprovada");

                    b.Property<DateOnly?>("ClausulaDataAprovacao")
                        .HasColumnType("date")
                        .HasColumnName("clausula_data_aprovacao");

                    b.Property<int>("ClausulaGeralEstruturaId")
                        .HasColumnType("int")
                        .HasColumnName("clausula_geral_estrutura_id");

                    b.Property<int>("ClausulaId")
                        .HasColumnType("int")
                        .HasColumnName("clausula_id");

                    b.Property<bool>("ClausulaLiberada")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("clausula_liberada");

                    b.Property<string>("ClausulaTexto")
                        .HasColumnType("longtext")
                        .HasColumnName("clausula_texto");

                    b.Property<string>("CnpjUnidades")
                        .HasColumnType("longtext")
                        .HasColumnName("cnpjs_unidades");

                    b.Property<string>("CodigosSindicatoClienteUnidades")
                        .HasColumnType("longtext")
                        .HasColumnName("codigos_sindicato_cliente_unidades");

                    b.Property<string>("CodigosUnidades")
                        .HasColumnType("longtext")
                        .HasColumnName("codigos_unidades");

                    b.Property<string>("DataBase")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("documento_database");

                    b.Property<string>("DenominacoesLaborais")
                        .HasColumnType("longtext")
                        .HasColumnName("denominacoes_laborais");

                    b.Property<string>("DenominacoesPatronais")
                        .HasColumnType("longtext")
                        .HasColumnName("denominacoes_patronais");

                    b.Property<DateOnly?>("DocumentoDataAprovacao")
                        .HasColumnType("date")
                        .HasColumnName("documento_data_aprovacao");

                    b.Property<int>("DocumentoSindicalId")
                        .HasColumnType("int")
                        .HasColumnName("documento_sindical_id");

                    b.Property<string>("DocumentoSindicatosLaborais")
                        .HasColumnType("json")
                        .HasColumnName("documento_sindicatos_laborais");

                    b.Property<string>("DocumentoSindicatosPatronais")
                        .HasColumnType("json")
                        .HasColumnName("documento_sindicatos_patronais");

                    b.Property<string>("DocumentoTitulo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("documento_titulo");

                    b.Property<string>("DocumentoUf")
                        .HasColumnType("longtext")
                        .HasColumnName("documento_uf");

                    b.Property<DateOnly>("DocumentoValidadeFinal")
                        .HasColumnType("date")
                        .HasColumnName("documento_validade_final");

                    b.Property<DateOnly>("DocumentoValidadeInicial")
                        .HasColumnType("date")
                        .HasColumnName("documento_validade_inicial");

                    b.Property<int>("EstruturaClausulaId")
                        .HasColumnType("int")
                        .HasColumnName("estrutura_clausula_id");

                    b.Property<string>("EstruturaClausulaTipo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("estrutura_clausula_tipo");

                    b.Property<int>("GrupoClausulaId")
                        .HasColumnType("int")
                        .HasColumnName("grupo_clausula_id");

                    b.Property<string>("GrupoClausulaNome")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("grupo_clausula_nome");

                    b.Property<int>("GrupoDados")
                        .HasColumnType("int")
                        .HasColumnName("grupo_dados");

                    b.Property<int>("InformacaoAdicionalId")
                        .HasColumnType("int")
                        .HasColumnName("informacao_adicional_id");

                    b.Property<string>("InformacaoAdicionalNome")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("informacao_adicional_nome");

                    b.Property<string>("InformacaoAdicionalTipoDado")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("informacao_adicional_tipo_dado");

                    b.Property<string>("MunicipiosUnidades")
                        .HasColumnType("longtext")
                        .HasColumnName("municipios_unidades");

                    b.Property<int>("Sequencia")
                        .HasColumnType("int")
                        .HasColumnName("sequencia");

                    b.Property<string>("TipoDocumentoNome")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tipo_documento_nome");

                    b.Property<string>("UfsUnidades")
                        .HasColumnType("longtext")
                        .HasColumnName("ufs_unidades");

                    b.Property<string>("ValorCombo")
                        .HasColumnType("longtext")
                        .HasColumnName("valor_combo");

                    b.Property<string>("ValorData")
                        .HasColumnType("longtext")
                        .HasColumnName("valor_data");

                    b.Property<string>("ValorDescricao")
                        .HasColumnType("longtext")
                        .HasColumnName("valor_descricao");

                    b.Property<string>("ValorHora")
                        .HasColumnType("longtext")
                        .HasColumnName("valor_hora");

                    b.Property<decimal?>("ValorNumerico")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("valor_numerico");

                    b.Property<decimal?>("ValorPercentual")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("valor_percentual");

                    b.Property<string>("ValorTexto")
                        .HasColumnType("longtext")
                        .HasColumnName("valor_texto");

                    b.ToTable((string)null);

                    b.ToView("clausula_geral_info_adicional_vw", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.ClausulasGerais.Views.ClausulaGeralVw", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("documento_id");

                    b.Property<int>("Aprovados")
                        .HasColumnType("int")
                        .HasColumnName("quantidade_aprovados");

                    b.Property<DateOnly?>("DataAprovacao")
                        .HasColumnType("date")
                        .HasColumnName("data_aprovacao");

                    b.Property<DateOnly?>("DataScrap")
                        .HasColumnType("date")
                        .HasColumnName("data_scrap");

                    b.Property<DateOnly?>("DataSla")
                        .HasColumnType("date")
                        .HasColumnName("data_sla");

                    b.Property<int>("NaoAprovados")
                        .HasColumnType("int")
                        .HasColumnName("quantidade_nao_aprovados");

                    b.Property<int>("NaoProcessados")
                        .HasColumnType("int")
                        .HasColumnName("quantidade_nao_processados");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext")
                        .HasColumnName("nome_doc");

                    b.Property<int>("Processados")
                        .HasColumnType("int")
                        .HasColumnName("quantidade_processados");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.ToView("clausula_geral_vw", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.ClientesUnidades.Views.EstabelecimentosVw", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("ClienteGrupoIdGrupoEconomico")
                        .HasColumnType("int")
                        .HasColumnName("cliente_grupo_id_grupo_economico");

                    b.Property<string>("Cnpj")
                        .HasColumnType("longtext")
                        .HasColumnName("cnpj");

                    b.Property<string>("Filial")
                        .HasColumnType("longtext")
                        .HasColumnName("filial");

                    b.Property<string>("Grupo")
                        .HasColumnType("longtext")
                        .HasColumnName("grupo");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext")
                        .HasColumnName("nome");

                    b.Property<string>("NomeGrupoEconomico")
                        .HasColumnType("longtext")
                        .HasColumnName("nome_grupo_economico");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.ToView("estabelecimentos_vw", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.ClientesUnidades.Views.InformacoesEstabelecimentosVw", b =>
                {
                    b.Property<string>("CnpjEstabalecimento")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("CnpjUnidade");

                    b.Property<string>("CodigoEstabelecimento")
                        .HasColumnType("longtext")
                        .HasColumnName("CodigoUnidade");

                    b.Property<string>("CodigoSindicatoCliente")
                        .HasColumnType("longtext")
                        .HasColumnName("CodigoSindicatoLaboral");

                    b.Property<string>("DatasBases")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("datasBases");

                    b.Property<string>("EmailUsuario")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("EmailUsuario");

                    b.Property<string>("NomeEstabelecimento")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("NomeUnidade");

                    b.Property<string>("SindicatosLaborais")
                        .HasColumnType("json")
                        .HasColumnName("SindicatosLaborais");

                    b.Property<string>("SindicatosLaboraisSiglas")
                        .HasColumnType("longtext")
                        .HasColumnName("SindicatosLaboraisSiglas");

                    b.Property<string>("SindicatosPatronais")
                        .HasColumnType("json")
                        .HasColumnName("SindicatosPatronais");

                    b.Property<string>("SindicatosPatronaisSiglas")
                        .HasColumnType("longtext")
                        .HasColumnName("SindicatosPatronaisSiglas");

                    b.Property<int>("UnidadeId")
                        .HasColumnType("int")
                        .HasColumnName("UnidadeId");

                    b.ToTable((string)null);

                    b.ToView("informacoes_estabelecimentos_vw", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.Comentarios.Views.ComentarioSindicatoVw", b =>
                {
                    b.Property<string>("Comentario")
                        .HasColumnType("longtext")
                        .HasColumnName("notificacao_comentario");

                    b.Property<DateTime?>("ComentarioDataRegistro")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("notificacao_data_registro");

                    b.Property<int?>("ComentarioDestinoId")
                        .HasColumnType("int")
                        .HasColumnName("notificacao_tipo_destino_id");

                    b.Property<int?>("ComentarioEmpresaDestinoId")
                        .HasColumnType("int")
                        .HasColumnName("empresa_id");

                    b.Property<int?>("ComentarioEmpresaGrupoEconomicoDestinoId")
                        .HasColumnType("int")
                        .HasColumnName("grupo_economico_id");

                    b.Property<int?>("ComentarioEstabelecimentoDestinoId")
                        .HasColumnType("int")
                        .HasColumnName("estabelecimento_id");

                    b.Property<string>("ComentarioEtiqueta")
                        .HasColumnType("longtext")
                        .HasColumnName("notificacao_etiqueta");

                    b.Property<int?>("ComentarioResponsavelGrupoEconomicoId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_publicacao_grupo_economico_id");

                    b.Property<int?>("ComentarioResponsavelId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_publicacao_id");

                    b.Property<string>("ComentarioResponsavelNivel")
                        .HasColumnType("longtext")
                        .HasColumnName("usuario_publicacao_tipo");

                    b.Property<string>("ComentarioResponsavelNome")
                        .HasColumnType("longtext")
                        .HasColumnName("usuario_publicacao");

                    b.Property<string>("ComentarioTipoDestino")
                        .HasColumnType("longtext")
                        .HasColumnName("notificacao_tipo_destino");

                    b.Property<int?>("SindicatoId")
                        .HasColumnType("int")
                        .HasColumnName("sindicato_id");

                    b.Property<string>("SindicatoRazaoSocial")
                        .HasColumnType("longtext")
                        .HasColumnName("sindicato_razao_social");

                    b.Property<string>("SindicatoSigla")
                        .HasColumnType("longtext")
                        .HasColumnName("sindicato_sigla");

                    b.Property<string>("SindicatoTipo")
                        .HasColumnType("longtext")
                        .HasColumnName("tipo");

                    b.Property<string>("SindicatoUf")
                        .HasColumnType("longtext")
                        .HasColumnName("sindicato_localizacao_uf");

                    b.Property<string>("Tipo")
                        .HasColumnType("longtext");

                    b.Property<int>("Visivel")
                        .HasColumnType("int")
                        .HasColumnName("visivel");

                    b.ToTable((string)null);

                    b.ToView("comentario_sindicato_vw", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.Comentarios.Views.Comentarios.ComentariosVw", b =>
                {
                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("comentario");

                    b.Property<DateOnly?>("DataValidade")
                        .HasColumnType("date")
                        .HasColumnName("data_validade");

                    b.Property<int>("EtiquetaId")
                        .HasColumnType("int")
                        .HasColumnName("etiqueta_id");

                    b.Property<string>("EtiquetaNome")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("etiqueta_nome");

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("NomeClausula")
                        .HasColumnType("longtext")
                        .HasColumnName("nome_clausula");

                    b.Property<string>("NomeUsuario")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nome_usuario");

                    b.Property<string>("SiglaSindicatoLaboral")
                        .HasColumnType("longtext")
                        .HasColumnName("sigla_sinde");

                    b.Property<string>("SiglaSindicatoPatronal")
                        .HasColumnType("longtext")
                        .HasColumnName("sigla_sp");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tipo");

                    b.Property<string>("TipoNotificacao")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tipo_notificacao");

                    b.Property<string>("TipoUsuarioDestino")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tipo_usuario_destino");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("bigint")
                        .HasColumnName("usuario_id");

                    b.Property<int>("Visivel")
                        .HasColumnType("int")
                        .HasColumnName("visivel");

                    b.ToTable((string)null);

                    b.ToView("comentarios_vw", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.Dirigentes.Laborais.Views.DirigenteLaboralVw", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Cargo")
                        .HasColumnType("longtext")
                        .HasColumnName("cargo");

                    b.Property<int?>("Grupo")
                        .HasColumnType("int")
                        .HasColumnName("grupo");

                    b.Property<DateOnly?>("InicioMandato")
                        .HasColumnType("date")
                        .HasColumnName("inicio_mandato");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext")
                        .HasColumnName("nome");

                    b.Property<string>("NomeUnidade")
                        .HasColumnType("longtext")
                        .HasColumnName("nome_unidade");

                    b.Property<string>("RazaoSocial")
                        .HasColumnType("longtext")
                        .HasColumnName("razao_social");

                    b.Property<string>("Sigla")
                        .HasColumnType("longtext")
                        .HasColumnName("sigla");

                    b.Property<int?>("SindeId")
                        .HasColumnType("int")
                        .HasColumnName("sinde_id");

                    b.Property<string>("Situacao")
                        .HasColumnType("longtext")
                        .HasColumnName("situacao");

                    b.Property<DateOnly?>("TerminoMandato")
                        .HasColumnType("date")
                        .HasColumnName("termino_mandato");

                    b.Property<int?>("UnidadeId")
                        .HasColumnType("int")
                        .HasColumnName("unidade_id");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.ToView("dirigente_laboral_vw", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.Dirigentes.Patronais.Views.DirigentePatronalVw", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Cargo")
                        .HasColumnType("longtext")
                        .HasColumnName("cargo");

                    b.Property<int?>("Grupo")
                        .HasColumnType("int")
                        .HasColumnName("grupo");

                    b.Property<DateOnly?>("InicioMandato")
                        .HasColumnType("date")
                        .HasColumnName("inicio_mandato");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext")
                        .HasColumnName("nome");

                    b.Property<string>("NomeUnidade")
                        .HasColumnType("longtext")
                        .HasColumnName("nome_unidade");

                    b.Property<string>("RazaoSocial")
                        .HasColumnType("longtext")
                        .HasColumnName("razao_social");

                    b.Property<string>("Sigla")
                        .HasColumnType("longtext")
                        .HasColumnName("sigla");

                    b.Property<int?>("SindpId")
                        .HasColumnType("int")
                        .HasColumnName("sindp_id");

                    b.Property<string>("Situacao")
                        .HasColumnType("longtext")
                        .HasColumnName("situacao");

                    b.Property<DateOnly?>("TerminoMandato")
                        .HasColumnType("date")
                        .HasColumnName("termino_mandato");

                    b.Property<int?>("UnidadeId")
                        .HasColumnType("int")
                        .HasColumnName("unidade_id");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.ToView("dirigente_patronal_vw", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.DocumentosSindicais.Views.DocumentoSindicalClausulasVw", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id_doc");

                    b.Property<string>("Anuencia")
                        .HasColumnType("longtext")
                        .HasColumnName("anuencia");

                    b.Property<string>("Arquivo")
                        .HasColumnType("longtext")
                        .HasColumnName("caminho_arquivo");

                    b.Property<DateTime?>("ClausulaDataUltimaAprovacao")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("clausula_data_ultima_aprovacao");

                    b.Property<int>("ClausulaQuantidadeNaoAprovadas")
                        .HasColumnType("int")
                        .HasColumnName("clausula_quantidade_nao_aprovadas");

                    b.Property<DateTime?>("DataAprovacao")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_aprovacao");

                    b.Property<string>("DataBase")
                        .HasColumnType("longtext")
                        .HasColumnName("database_doc");

                    b.Property<DateTime>("DataUpload")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_upload");

                    b.Property<DateOnly>("DataValidadeFinal")
                        .HasColumnType("date")
                        .HasColumnName("validade_final");

                    b.Property<DateOnly>("DataValidadeInicial")
                        .HasColumnType("date")
                        .HasColumnName("validade_inicial");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext")
                        .HasColumnName("descricao_documento");

                    b.Property<string>("Modulo")
                        .HasColumnType("longtext")
                        .HasColumnName("modulo");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext")
                        .HasColumnName("nome_doc");

                    b.Property<string>("Restrito")
                        .HasColumnType("longtext")
                        .HasColumnName("doc_restrito");

                    b.Property<string>("SiglaDoc")
                        .HasColumnType("longtext")
                        .HasColumnName("sigla_doc");

                    b.Property<string>("SindicatosLaboraisMunicipios")
                        .HasColumnType("json")
                        .HasColumnName("sindicatos_laborais_municipios");

                    b.Property<string>("SindicatosLaboraisSiglas")
                        .HasColumnType("json")
                        .HasColumnName("sindicatos_laborais_siglas");

                    b.Property<string>("SindicatosPatronaisSiglas")
                        .HasColumnType("json")
                        .HasColumnName("sindicatos_patronais_siglas");

                    b.Property<string>("TipoDocumento")
                        .HasColumnType("longtext")
                        .HasColumnName("tipo_documento");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.ToView("documento_sindical_clausulas_vw", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.DocumentosSindicais.Views.DocumentoSindicalSisapVw", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("CnaeSubclasseCodigos")
                        .HasColumnType("json")
                        .HasColumnName("CnaeSubclasseCodigos");

                    b.Property<string>("Cnaes")
                        .HasColumnType("json")
                        .HasColumnName("CnaeDocs");

                    b.Property<DateOnly?>("DataAprovacao")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DataAssinatura")
                        .HasColumnType("date")
                        .HasColumnName("DataAssinatura");

                    b.Property<DateOnly?>("DataSla")
                        .HasColumnType("date")
                        .HasColumnName("DataSla");

                    b.Property<DateOnly?>("DataValidadeFinal")
                        .HasColumnType("date")
                        .HasColumnName("ValidadeFinal");

                    b.Property<DateOnly?>("DataValidadeInicial")
                        .HasColumnType("date")
                        .HasColumnName("ValidadeInicial");

                    b.Property<string>("NomeDoc")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("NomeDocumento");

                    b.Property<string>("SindicatosLaborais")
                        .HasColumnType("json")
                        .HasColumnName("NomeSindicatoLaboral");

                    b.Property<string>("SindicatosPatronais")
                        .HasColumnType("json")
                        .HasColumnName("NomeSindicatoPatronal");

                    b.Property<string>("UsuarioAprovador")
                        .HasColumnType("longtext")
                        .HasColumnName("NomeUsuarioAprovador");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.ToView("documentos_sindicais_sisap_vw", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.DocumentosSindicais.Views.DocumentoSindicalVw", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id_doc");

                    b.Property<string>("AbrangenciaUsuario")
                        .HasColumnType("longtext")
                        .HasColumnName("abrangencia_usuario");

                    b.Property<string>("Abrangencias")
                        .HasColumnType("json")
                        .HasColumnName("abrangencia");

                    b.Property<string>("Anuencia")
                        .HasColumnType("longtext")
                        .HasColumnName("anuencia");

                    b.Property<string>("Arquivo")
                        .HasColumnType("longtext")
                        .HasColumnName("caminho_arquivo");

                    b.Property<string>("Assuntos")
                        .HasColumnType("json")
                        .HasColumnName("assuntos");

                    b.Property<string>("AssuntosStringForSearch")
                        .HasColumnType("longtext")
                        .HasColumnName("assuntos_string_for_search");

                    b.Property<string>("AtividadesEconomicas")
                        .HasColumnType("json")
                        .HasColumnName("cnae_doc");

                    b.Property<DateTime?>("DataAprovacao")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_aprovacao");

                    b.Property<string>("DataBase")
                        .HasColumnType("longtext")
                        .HasColumnName("database_doc");

                    b.Property<DateOnly?>("DataInclusao")
                        .HasColumnType("date")
                        .HasColumnName("data_inclusao");

                    b.Property<DateOnly?>("DataLiberacaoClausulas")
                        .HasColumnType("date")
                        .HasColumnName("data_liberacao_clausulas");

                    b.Property<DateTime>("DataUpload")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_upload");

                    b.Property<DateOnly>("DataValidadeFinal")
                        .HasColumnType("date")
                        .HasColumnName("validade_final");

                    b.Property<DateOnly>("DataValidadeInicial")
                        .HasColumnType("date")
                        .HasColumnName("validade_inicial");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext")
                        .HasColumnName("descricao_documento");

                    b.Property<string>("Estabelecimentos")
                        .HasColumnType("json")
                        .HasColumnName("cliente_estabelecimento");

                    b.Property<string>("Modulo")
                        .HasColumnType("longtext")
                        .HasColumnName("modulo");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext")
                        .HasColumnName("nome_doc");

                    b.Property<string>("Observacao")
                        .HasColumnType("longtext")
                        .HasColumnName("observacao");

                    b.Property<string>("Restrito")
                        .HasColumnType("longtext")
                        .HasColumnName("doc_restrito");

                    b.Property<string>("SiglaDoc")
                        .HasColumnType("longtext")
                        .HasColumnName("sigla_doc");

                    b.Property<string>("SindicatoLaboral")
                        .HasColumnType("json")
                        .HasColumnName("sind_laboral");

                    b.Property<string>("SindicatoPatronal")
                        .HasColumnType("json")
                        .HasColumnName("sind_patronal");

                    b.Property<string>("SindicatosLaboraisIds")
                        .HasColumnType("json")
                        .HasColumnName("sindicatos_laborais_ids");

                    b.Property<string>("SindicatosLaboraisMunicipios")
                        .HasColumnType("json")
                        .HasColumnName("sindicatos_laborais_municipios");

                    b.Property<string>("SindicatosLaboraisSiglas")
                        .HasColumnType("json")
                        .HasColumnName("sindicatos_laborais_siglas");

                    b.Property<string>("SindicatosLaboraisSiglasString")
                        .HasColumnType("longtext")
                        .HasColumnName("siglas_laborais");

                    b.Property<string>("SindicatosPatronaisIds")
                        .HasColumnType("json")
                        .HasColumnName("sindicatos_patronais_ids");

                    b.Property<string>("SindicatosPatronaisSiglas")
                        .HasColumnType("json")
                        .HasColumnName("sindicatos_patronais_siglas");

                    b.Property<string>("SindicatosPatronaisSiglasString")
                        .HasColumnType("longtext")
                        .HasColumnName("siglas_patronais");

                    b.Property<int?>("TipoDocId")
                        .HasColumnType("int")
                        .HasColumnName("tipo_doc_id");

                    b.Property<string>("TipoDocumento")
                        .HasColumnType("longtext")
                        .HasColumnName("tipo_documento");

                    b.Property<int?>("UsuarioCadastro")
                        .HasColumnType("int")
                        .HasColumnName("usuario_cadastro");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.ToView("documento_sindical_vw", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.DocumentosSindicais.Views.DocumentoSindicatoEstabelecimentoVw", b =>
                {
                    b.Property<string>("DocumentoCaminhoArquivo")
                        .HasColumnType("longtext")
                        .HasColumnName("documento_caminho_arquivo");

                    b.Property<DateOnly?>("DocumentoDataAssinatura")
                        .HasColumnType("date")
                        .HasColumnName("documento_data_assinatura");

                    b.Property<DateOnly?>("DocumentoDataRegistroMte")
                        .HasColumnType("date")
                        .HasColumnName("documento_data_registro_mte");

                    b.Property<string>("DocumentoDatabase")
                        .HasColumnType("longtext")
                        .HasColumnName("documento_database");

                    b.Property<int>("DocumentoId")
                        .HasColumnType("int")
                        .HasColumnName("documento_id");

                    b.Property<string>("DocumentoNome")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("documento_nome");

                    b.Property<string>("DocumentoSindicatosLaborais")
                        .HasColumnType("json")
                        .HasColumnName("documento_sindicatos_laborais");

                    b.Property<string>("DocumentoSindicatosPatronais")
                        .HasColumnType("json")
                        .HasColumnName("documento_sindicatos_patronais");

                    b.Property<string>("DocumentoTitulo")
                        .HasColumnType("longtext")
                        .HasColumnName("documento_titulo");

                    b.Property<string>("DocumentoVersao")
                        .HasColumnType("longtext")
                        .HasColumnName("documento_versao");

                    b.Property<DateOnly>("DocumentoVigenciaFinal")
                        .HasColumnType("date")
                        .HasColumnName("documento_vigencia_final");

                    b.Property<DateOnly>("DocumentoVigenciaInicial")
                        .HasColumnType("date")
                        .HasColumnName("documento_vigencia_inicial");

                    b.Property<string>("EstabelecimentoCodigo")
                        .HasColumnType("longtext")
                        .HasColumnName("estabelecimento_codigo");

                    b.Property<string>("EstabelecimentoCodigoSindicatoLaboral")
                        .HasColumnType("longtext")
                        .HasColumnName("estabelecimento_codigo_sindicato_laboral");

                    b.Property<string>("EstabelecimentoCodigoSindicatoPatronal")
                        .HasColumnType("longtext")
                        .HasColumnName("estabelecimento_codigo_sindicato_patronal");

                    b.Property<int>("EstabelecimentoId")
                        .HasColumnType("int")
                        .HasColumnName("estabelecimento_id");

                    b.Property<string>("EstabelecimentoNome")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("estabelecimento_nome");

                    b.Property<string>("EstabelecimentoSindicatosLaborais")
                        .HasColumnType("json")
                        .HasColumnName("estabelecimento_sindicatos_laborais");

                    b.Property<string>("EstabelecimentoSindicatosPatronais")
                        .HasColumnType("json")
                        .HasColumnName("estabelecimento_sindicatos_patronais");

                    b.Property<int>("GrupoEconomicoId")
                        .HasColumnType("int")
                        .HasColumnName("grupo_economico_id");

                    b.Property<string>("GrupoEconomicoLogo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("grupo_economico_logo_url");

                    b.Property<string>("GrupoEconomicoNome")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("grupo_economico_nome");

                    b.Property<int>("MatrizId")
                        .HasColumnType("int")
                        .HasColumnName("matriz_id");

                    b.Property<string>("MatrizNome")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("matriz_nome");

                    b.ToTable((string)null);

                    b.ToView("documento_sindicato_estabelecimentos_vw", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.EventosCalendario.Views.EventosCalendarios.EventoCalendarioVw", b =>
                {
                    b.Property<string>("AtividadesEconomicas")
                        .HasColumnType("longtext")
                        .HasColumnName("atividades_economicas");

                    b.Property<DateOnly>("Data")
                        .HasColumnType("date")
                        .HasColumnName("data");

                    b.Property<string>("Origem")
                        .HasColumnType("longtext")
                        .HasColumnName("origem");

                    b.Property<string>("SiglasSindicatosLaborais")
                        .HasColumnType("longtext")
                        .HasColumnName("siglas_sindicatos_laborais");

                    b.Property<string>("SiglasSindicatosPatronais")
                        .HasColumnType("longtext")
                        .HasColumnName("siglas_sindicatos_patronais");

                    b.Property<int?>("TipoDocId")
                        .HasColumnType("int")
                        .HasColumnName("tipo_doc");

                    b.Property<string>("TipoDocNome")
                        .HasColumnType("longtext");

                    b.Property<string>("TipoEvento")
                        .HasColumnType("longtext");

                    b.Property<DateOnly?>("ValidadeFinal")
                        .HasColumnType("date")
                        .HasColumnName("validade_final");

                    b.Property<DateOnly?>("ValidadeInicial")
                        .HasColumnType("date")
                        .HasColumnName("validade_inicial");

                    b.ToTable((string)null);

                    b.ToView("evento_calendario_vw", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.EventosCalendario.Views.EventosCalendariosAssembleiasReunioes.EventoCalendarioAssembleiaReuniaoVw", b =>
                {
                    b.Property<string>("AtividadesEconomicas")
                        .HasColumnType("json")
                        .HasColumnName("atividades_economicas_ids");

                    b.Property<int?>("ChaveReferenciaId")
                        .HasColumnType("int")
                        .HasColumnName("chave_referencia");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_referencia");

                    b.Property<string>("DataBaseNegociacao")
                        .HasColumnType("longtext")
                        .HasColumnName("data_base");

                    b.Property<string>("DescricoesSubclasse")
                        .HasColumnType("longtext")
                        .HasColumnName("descricoes_subclasses");

                    b.Property<string>("Fase")
                        .HasColumnType("longtext")
                        .HasColumnName("fase_documento");

                    b.Property<string>("Origem")
                        .HasColumnType("longtext")
                        .HasColumnName("origem");

                    b.Property<string>("SindicatosLaborais")
                        .HasColumnType("longtext")
                        .HasColumnName("sindicatos_laborais");

                    b.Property<string>("SindicatosPatronais")
                        .HasColumnType("longtext")
                        .HasColumnName("sindicatos_patronais");

                    b.Property<int?>("TipoDocId")
                        .HasColumnType("int")
                        .HasColumnName("tipo_doc_id");

                    b.Property<string>("TipoDocNome")
                        .HasColumnType("longtext")
                        .HasColumnName("nome_documento");

                    b.Property<string>("TipoEvento")
                        .HasColumnType("longtext")
                        .HasColumnName("tipo_evento");

                    b.Property<int?>("TipoEventoId")
                        .HasColumnType("int")
                        .HasColumnName("tipo_evento_id");

                    b.ToTable((string)null);

                    b.ToView("calendario_sindical_assembleia_reuniao_vw", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.EventosCalendario.Views.EventosCalendariosDescontosPagamentosVencimentos.EventoCalendarioDescontoPagamentoVencimentoVw", b =>
                {
                    b.Property<string>("AtividadesEconomicas")
                        .HasColumnType("longtext")
                        .HasColumnName("atividades_economicas");

                    b.Property<long?>("ClausulaGeralId")
                        .HasColumnType("bigint")
                        .HasColumnName("clausula_geral_id");

                    b.Property<DateOnly>("Data")
                        .HasColumnType("date")
                        .HasColumnName("data_evento");

                    b.Property<string>("GrupoClausulas")
                        .HasColumnType("longtext")
                        .HasColumnName("nome_grupo");

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id_evento");

                    b.Property<string>("NomeClausula")
                        .HasColumnType("longtext")
                        .HasColumnName("nome_clausula");

                    b.Property<string>("NomeDocumento")
                        .HasColumnType("longtext")
                        .HasColumnName("nome_documento");

                    b.Property<string>("NomeEvento")
                        .HasColumnType("longtext")
                        .HasColumnName("nome_evento");

                    b.Property<string>("Origem")
                        .HasColumnType("longtext")
                        .HasColumnName("origem_evento");

                    b.Property<string>("SiglasSindicatosLaborais")
                        .HasColumnType("longtext")
                        .HasColumnName("sindicatos_laborais");

                    b.Property<string>("SiglasSindicatosPatronais")
                        .HasColumnType("longtext")
                        .HasColumnName("sindicatos_patronais");

                    b.Property<string>("SindicatoLaboralId")
                        .HasColumnType("longtext")
                        .HasColumnName("sindicatos_laborais_ids");

                    b.Property<string>("SindicatoPatronalId")
                        .HasColumnType("longtext")
                        .HasColumnName("sindicatos_patronais_ids");

                    b.ToTable((string)null);

                    b.ToView("evento_calendario_desconto_pagamento_vencimento_vw", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.EventosCalendario.Views.EventosCalendariosTrintidios.EventoCalendarioTrintidioVw", b =>
                {
                    b.Property<string>("AtividadesEconomicas")
                        .HasColumnType("longtext")
                        .HasColumnName("atividades_economicas");

                    b.Property<int?>("ChaveReferenciaId")
                        .HasColumnType("int")
                        .HasColumnName("chave_referencia");

                    b.Property<DateOnly>("Data")
                        .HasColumnType("date")
                        .HasColumnName("data");

                    b.Property<DateOnly?>("DataBase")
                        .HasColumnType("date")
                        .HasColumnName("database_doc");

                    b.Property<string>("NomeDocumento")
                        .HasColumnType("longtext")
                        .HasColumnName("nome_doc");

                    b.Property<string>("Origem")
                        .HasColumnType("longtext")
                        .HasColumnName("origem");

                    b.Property<string>("SiglasSindicatosLaborais")
                        .HasColumnType("longtext")
                        .HasColumnName("siglas_sindicatos_laborais");

                    b.Property<string>("SiglasSindicatosPatronais")
                        .HasColumnType("longtext")
                        .HasColumnName("siglas_sindicatos_patronais");

                    b.Property<string>("SindicatoLaboralId")
                        .HasColumnType("longtext")
                        .HasColumnName("sindicatos_laborais_ids");

                    b.Property<string>("SindicatoPatronalId")
                        .HasColumnType("longtext")
                        .HasColumnName("sindicatos_patronais_ids");

                    b.Property<DateOnly?>("ValidadeFinal")
                        .HasColumnType("date")
                        .HasColumnName("validade_final");

                    b.Property<DateOnly?>("ValidadeInicial")
                        .HasColumnType("date")
                        .HasColumnName("validade_inicial");

                    b.ToTable((string)null);

                    b.ToView("evento_calendario_trintidio_vw", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.EventosCalendario.Views.EventosCalendariosVencimentosDocumentos.EventoCalendarioVencimentoDocumentoVw", b =>
                {
                    b.Property<string>("AtividadesEconomicas")
                        .HasColumnType("longtext")
                        .HasColumnName("atividades_economicas");

                    b.Property<int?>("ChaveReferenciaId")
                        .HasColumnType("int")
                        .HasColumnName("chave_referencia");

                    b.Property<DateOnly>("Data")
                        .HasColumnType("date")
                        .HasColumnName("data");

                    b.Property<string>("Origem")
                        .HasColumnType("longtext")
                        .HasColumnName("origem");

                    b.Property<string>("SindicatosLaborais")
                        .HasColumnType("json")
                        .HasColumnName("sind_laboral");

                    b.Property<string>("SindicatosPatronais")
                        .HasColumnType("json")
                        .HasColumnName("sind_patronal");

                    b.Property<int?>("TipoDocId")
                        .HasColumnType("int")
                        .HasColumnName("tipo_doc_id");

                    b.Property<string>("TipoDocNome")
                        .HasColumnType("longtext")
                        .HasColumnName("tipo_doc_nome");

                    b.Property<string>("TipoEvento")
                        .HasColumnType("longtext")
                        .HasColumnName("tipo_evento");

                    b.Property<DateOnly?>("ValidadeFinal")
                        .HasColumnType("date")
                        .HasColumnName("validade_final");

                    b.Property<DateOnly?>("ValidadeInicial")
                        .HasColumnType("date")
                        .HasColumnName("validade_inicial");

                    b.ToTable((string)null);

                    b.ToView("evento_calendario_vencimento_documento_vw", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.EventosCalendario.Views.EventosCalendariosVencimentosMandatosLaborais.EventoCalendarioVencimentoMandatoLaboralVw", b =>
                {
                    b.Property<string>("AtividadesEconomicas")
                        .HasColumnType("longtext")
                        .HasColumnName("atividades_economicas");

                    b.Property<DateOnly>("Data")
                        .HasColumnType("date")
                        .HasColumnName("data");

                    b.Property<string>("Dirigente")
                        .HasColumnType("longtext")
                        .HasColumnName("dirigente");

                    b.Property<string>("Funcao")
                        .HasColumnType("longtext")
                        .HasColumnName("funcao");

                    b.Property<string>("Origem")
                        .HasColumnType("longtext")
                        .HasColumnName("origem");

                    b.Property<string>("SiglasSindicatosLaborais")
                        .HasColumnType("longtext")
                        .HasColumnName("siglas_sindicatos_laborais");

                    b.Property<int?>("SindId")
                        .HasColumnType("int")
                        .HasColumnName("sindicato_id");

                    b.Property<DateOnly?>("ValidadeFinal")
                        .HasColumnType("date")
                        .HasColumnName("validade_final");

                    b.Property<DateOnly?>("ValidadeInicial")
                        .HasColumnType("date")
                        .HasColumnName("validade_inicial");

                    b.ToTable((string)null);

                    b.ToView("evento_calendario_vencimento_mandato_laboral_vw", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.EventosCalendario.Views.EventosCalendariosVencimentosMandatosPatronais.EventoCalendarioVencimentoMandatoPatronalVw", b =>
                {
                    b.Property<string>("AtividadesEconomicas")
                        .HasColumnType("longtext")
                        .HasColumnName("atividades_economicas");

                    b.Property<DateOnly>("Data")
                        .HasColumnType("date")
                        .HasColumnName("data");

                    b.Property<string>("Dirigente")
                        .HasColumnType("longtext")
                        .HasColumnName("dirigente");

                    b.Property<string>("Funcao")
                        .HasColumnType("longtext")
                        .HasColumnName("funcao");

                    b.Property<string>("Origem")
                        .HasColumnType("longtext")
                        .HasColumnName("origem");

                    b.Property<string>("SiglasSindicatosPatronais")
                        .HasColumnType("longtext")
                        .HasColumnName("siglas_sindicatos_patronais");

                    b.Property<int?>("SindId")
                        .HasColumnType("int")
                        .HasColumnName("sindicato_id");

                    b.Property<string>("SindicatoLaboralId")
                        .HasColumnType("longtext");

                    b.Property<string>("SindicatoPatronalId")
                        .HasColumnType("longtext");

                    b.Property<DateOnly?>("ValidadeFinal")
                        .HasColumnType("date")
                        .HasColumnName("validade_final");

                    b.Property<DateOnly?>("ValidadeInicial")
                        .HasColumnType("date")
                        .HasColumnName("validade_inicial");

                    b.ToTable((string)null);

                    b.ToView("evento_calendario_vencimento_mandato_patronal_vw", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.EventosCalendario.Views.TiposSubtipos.TiposSubtiposVw", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nome");

                    b.Property<int?>("TipoAssociado")
                        .HasColumnType("int")
                        .HasColumnName("tipo_associado");

                    b.ToTable((string)null);

                    b.ToView("tipos_subtipos_evento_calendario_sindical_vw", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.MapasSindicais.Views.DocumentoMapaSindicalVw", b =>
                {
                    b.Property<DateOnly?>("ClausulaGeralDataAprovacao")
                        .HasColumnType("date")
                        .HasColumnName("clausula_geral_data_aprovacao");

                    b.Property<DateOnly?>("DataLiberacaoClausulas")
                        .HasColumnType("date")
                        .HasColumnName("data_liberacao_clausulas");

                    b.Property<string>("DataRegistro")
                        .HasColumnType("longtext")
                        .HasColumnName("data_registro");

                    b.Property<string>("DocumentoAbrangencia")
                        .HasColumnType("json")
                        .HasColumnName("documento_abrangencia");

                    b.Property<string>("DocumentoCnae")
                        .HasColumnType("json")
                        .HasColumnName("documento_cnae");

                    b.Property<DateOnly?>("DocumentoDataAprovacao")
                        .HasColumnType("date")
                        .HasColumnName("documento_data_aprovacao");

                    b.Property<DateOnly?>("DocumentoDataFinal")
                        .HasColumnType("date");

                    b.Property<string>("DocumentoDatabase")
                        .HasColumnType("longtext")
                        .HasColumnName("documento_database");

                    b.Property<string>("DocumentoDescricao")
                        .HasColumnType("longtext")
                        .HasColumnName("documento_descricao");

                    b.Property<string>("DocumentoEstabelecimento")
                        .HasColumnType("json")
                        .HasColumnName("documento_estabelecimento");

                    b.Property<int>("DocumentoId")
                        .HasColumnType("int")
                        .HasColumnName("documento_id");

                    b.Property<string>("DocumentoSindicatoLaboral")
                        .HasColumnType("json")
                        .HasColumnName("documento_sindicato_laboral");

                    b.Property<string>("DocumentoSindicatoPatronal")
                        .HasColumnType("json")
                        .HasColumnName("documento_sindicato_patronal");

                    b.Property<int?>("DocumentoTipoId")
                        .HasColumnType("int")
                        .HasColumnName("documento_tipo_id");

                    b.Property<string>("DocumentoTitulo")
                        .HasColumnType("longtext")
                        .HasColumnName("documento_titulo");

                    b.Property<string>("DocumentoUf")
                        .HasColumnType("longtext")
                        .HasColumnName("documento_uf");

                    b.Property<DateOnly?>("DocumentoValidadeFinal")
                        .HasColumnType("date")
                        .HasColumnName("documento_validade_final");

                    b.Property<DateOnly?>("DocumentoValidadeInicial")
                        .HasColumnType("date")
                        .HasColumnName("documento_validade_inicial");

                    b.Property<DateOnly?>("DocumentoValidadeInicicial")
                        .HasColumnType("date");

                    b.Property<int>("QuantidadeClausulas")
                        .HasColumnType("int");

                    b.Property<int>("QuantidadeClausulasLiberadas")
                        .HasColumnType("int");

                    b.Property<string>("TipoDocumentoNome")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tipo_documento_nome");

                    b.ToTable((string)null);

                    b.ToView("documento_mapa_sindical_vw", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.MapasSindicais.Views.MapaSindicalGerarExcelVw", b =>
                {
                    b.Property<string>("Aprovado")
                        .HasColumnType("longtext")
                        .HasColumnName("aprovado");

                    b.Property<int>("ClausualaGeralNumero")
                        .HasColumnType("int")
                        .HasColumnName("clausula_geral_numero");

                    b.Property<DateOnly?>("ClausulaGeralDataAprovacao")
                        .HasColumnType("date")
                        .HasColumnName("clausula_geral_data_aprovacao");

                    b.Property<string>("ClausulaGeralLiberada")
                        .HasColumnType("longtext")
                        .HasColumnName("clausula_geral_liberada");

                    b.Property<int>("ClausulaGeralQuantidadeCamposAdicionais")
                        .HasColumnType("int")
                        .HasColumnName("clausula_geral_quantidade_campos_adicionais");

                    b.Property<int?>("ClausulaId")
                        .HasColumnType("int")
                        .HasColumnName("clausula_id");

                    b.Property<string>("ClausulaTexto")
                        .HasColumnType("longtext")
                        .HasColumnName("clausula_texto");

                    b.Property<string>("Combo")
                        .HasColumnType("longtext");

                    b.Property<DateOnly?>("Data")
                        .HasColumnType("date");

                    b.Property<string>("DataRegistro")
                        .HasColumnType("longtext")
                        .HasColumnName("data_registro");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext");

                    b.Property<string>("DocumentoAbrangencia")
                        .HasColumnType("json")
                        .HasColumnName("documento_abrangencia");

                    b.Property<string>("DocumentoCnae")
                        .HasColumnType("json")
                        .HasColumnName("documento_cnae");

                    b.Property<DateOnly?>("DocumentoDataAprovacao")
                        .HasColumnType("date")
                        .HasColumnName("documento_data_aprovacao");

                    b.Property<DateOnly?>("DocumentoDataFinal")
                        .HasColumnType("date");

                    b.Property<string>("DocumentoDatabase")
                        .HasColumnType("longtext")
                        .HasColumnName("documento_database");

                    b.Property<string>("DocumentoDescricao")
                        .HasColumnType("longtext")
                        .HasColumnName("documento_descricao");

                    b.Property<string>("DocumentoEstabelecimento")
                        .HasColumnType("json")
                        .HasColumnName("documento_estabelecimento");

                    b.Property<int?>("DocumentoId")
                        .HasColumnType("int")
                        .HasColumnName("documento_id");

                    b.Property<string>("DocumentoSindicatoLaboral")
                        .HasColumnType("json")
                        .HasColumnName("documento_sindicato_laboral");

                    b.Property<string>("DocumentoSindicatoPatronal")
                        .HasColumnType("json")
                        .HasColumnName("documento_sindicato_patronal");

                    b.Property<int?>("DocumentoTipoId")
                        .HasColumnType("int")
                        .HasColumnName("documento_tipo_id");

                    b.Property<string>("DocumentoTitulo")
                        .HasColumnType("longtext")
                        .HasColumnName("documento_titulo");

                    b.Property<string>("DocumentoUf")
                        .HasColumnType("longtext")
                        .HasColumnName("documento_uf");

                    b.Property<DateOnly?>("DocumentoValidadeFinal")
                        .HasColumnType("date")
                        .HasColumnName("documento_validade_final");

                    b.Property<DateOnly?>("DocumentoValidadeInicial")
                        .HasColumnType("date")
                        .HasColumnName("documento_validade_inicial");

                    b.Property<DateOnly?>("DocumentoValidadeInicicial")
                        .HasColumnType("date");

                    b.Property<int?>("EstruturaClausulaId")
                        .HasColumnType("int")
                        .HasColumnName("estrutura_clausula_id");

                    b.Property<string>("EstruturaClausulaNome")
                        .HasColumnType("longtext")
                        .HasColumnName("estrutura_clausula_nome");

                    b.Property<int>("EstruturaClausulaQuantidadeCamposAdicionais")
                        .HasColumnType("int")
                        .HasColumnName("estrutura_clausula_quantidade_campos_adicionais");

                    b.Property<int?>("GrupoClausulaId")
                        .HasColumnType("int")
                        .HasColumnName("grupo_clausula_id");

                    b.Property<string>("GrupoClausulaNome")
                        .HasColumnType("longtext")
                        .HasColumnName("grupo_clausula_nome");

                    b.Property<string>("GrupoDados")
                        .HasColumnType("longtext");

                    b.Property<string>("Hora")
                        .HasColumnType("longtext");

                    b.Property<int?>("IdClausulaGeral")
                        .HasColumnType("int");

                    b.Property<int?>("Numerico")
                        .HasColumnType("int");

                    b.Property<decimal?>("Percentual")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("QuantidadeSindicatosLaborais")
                        .HasColumnType("int")
                        .HasColumnName("quantidade_sindicatos_laborais");

                    b.Property<int>("QuantidadeSindicatosPatronais")
                        .HasColumnType("int")
                        .HasColumnName("quantidade_sindicatos_patronais");

                    b.Property<int?>("Sequencia")
                        .HasColumnType("int");

                    b.Property<string>("Texto")
                        .HasColumnType("longtext");

                    b.Property<string>("TipoDado")
                        .HasColumnType("longtext");

                    b.Property<int?>("TipoInformacaoId")
                        .HasColumnType("int");

                    b.Property<string>("TipoInformacaoNome")
                        .HasColumnType("longtext");

                    b.ToTable((string)null);

                    b.ToView("mapa_sindical_vw", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.Models.AbrangDocsind", b =>
                {
                    b.Property<int>("IdAbrgdocsind")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_abrgdocsind");

                    b.Property<int>("DocSindIdDocumento")
                        .HasColumnType("int")
                        .HasColumnName("doc_sind_id_documento");

                    b.Property<int>("LocalizacaoIdLocalizacao")
                        .HasColumnType("int")
                        .HasColumnName("localizacao_id_localizacao");

                    b.HasKey("IdAbrgdocsind")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DocSindIdDocumento" }, "fk_abrang_docsind_doc_sind1_idx");

                    b.HasIndex(new[] { "LocalizacaoIdLocalizacao" }, "fk_abrang_docsind_localizacao1_idx");

                    b.ToTable("abrang_docsind", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.AbrangenciaDocumento", b =>
                {
                    b.Property<int>("IdabrangenciaDocumento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idabrangencia_documento");

                    b.Property<int>("DocumentosIddocumentos")
                        .HasColumnType("int")
                        .HasColumnName("documentos_iddocumentos");

                    b.Property<int>("LocalizacaoIdLocalizacao")
                        .HasColumnType("int")
                        .HasColumnName("localizacao_id_localizacao");

                    b.HasKey("IdabrangenciaDocumento")
                        .HasName("PRIMARY");

                    b.ToTable("abrangencia_documento", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.AdTipoinformacaoadicional", b =>
                {
                    b.Property<int>("Cdtipoinformacaoadicional")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cdtipoinformacaoadicional");

                    b.Property<string>("Calendario")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("calendario");

                    b.Property<string>("ClasseIa")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("classe_ia");

                    b.Property<string>("ComboOptions")
                        .HasMaxLength(5000)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("combo_options");

                    b.Property<string>("DadoMs")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("dado_ms");

                    b.Property<DateOnly?>("Dtultatualizacao")
                        .HasColumnType("date")
                        .HasColumnName("dtultatualizacao");

                    b.Property<string>("Idtipodado")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("idtipodado");

                    b.Property<string>("Nmtipoinformacaoadicional")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("nmtipoinformacaoadicional");

                    b.Property<string>("SorthName")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("sorth_name");

                    b.Property<string>("TarefaInf")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("tarefa_inf");

                    b.Property<string>("UsoDado")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("uso_dado");

                    b.HasKey("Cdtipoinformacaoadicional")
                        .HasName("PRIMARY");

                    b.ToTable("ad_tipoinformacaoadicional", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.Models.AnuenciaInicial", b =>
                {
                    b.Property<int>("IdanuenciaInicial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idanuencia_inicial");

                    b.Property<DateTime>("DataAnuencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("data_anuencia")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UsuarioAdmEmail")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("usuario_adm_email");

                    b.HasKey("IdanuenciaInicial")
                        .HasName("PRIMARY");

                    b.ToTable("anuencia_inicial", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.AnuenciaUsuario", b =>
                {
                    b.Property<int>("IdanuenciaUsuarios")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idanuencia_usuarios");

                    b.Property<DateTime>("DatadocAnuencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("datadoc_anuencia")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("DocumentosIddocumentos")
                        .HasColumnType("int")
                        .HasColumnName("documentos_iddocumentos");

                    b.Property<int>("UsuarioAdmIdUser")
                        .HasColumnType("int")
                        .HasColumnName("usuario_adm_id_user");

                    b.HasKey("IdanuenciaUsuarios")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DocumentosIddocumentos" }, "ibfk_documentos_anuencia_idx");

                    b.ToTable("anuencia_usuarios", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_0900_as_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.Associacao", b =>
                {
                    b.Property<int>("IdAssociacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_associacao");

                    b.Property<string>("AreaGeoeconomica")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("area_geoeconomica");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(95)
                        .HasColumnType("varchar(95)")
                        .HasColumnName("bairro");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("categoria");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cep");

                    b.Property<string>("Classe")
                        .IsRequired()
                        .HasMaxLength(22)
                        .HasColumnType("varchar(22)")
                        .HasColumnName("classe");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cnpj");

                    b.Property<string>("Complemento")
                        .HasMaxLength(95)
                        .HasColumnType("varchar(95)")
                        .HasColumnName("complemento");

                    b.Property<string>("Ddd")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ddd");

                    b.Property<string>("Email")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)")
                        .HasColumnName("email");

                    b.Property<string>("Email2")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("email2");

                    b.Property<string>("Email3")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("email3");

                    b.Property<string>("Estado")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("estado");

                    b.Property<string>("Facebook")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("facebook");

                    b.Property<string>("Grau")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("grau");

                    b.Property<string>("Grupo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("grupo");

                    b.Property<string>("Instagram")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("instagram");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(145)
                        .HasColumnType("varchar(145)")
                        .HasColumnName("logradouro");

                    b.Property<string>("Municipio")
                        .IsRequired()
                        .HasMaxLength(145)
                        .HasColumnType("varchar(145)")
                        .HasColumnName("municipio");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("nome");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("numero");

                    b.Property<string>("Ramal")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("ramal");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("sigla");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("status");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telefone");

                    b.Property<string>("Twitter")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("twitter");

                    b.Property<string>("Website")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("website");

                    b.HasKey("IdAssociacao")
                        .HasName("PRIMARY");

                    b.ToTable("associacao", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.Assunto", b =>
                {
                    b.Property<int>("Idassunto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idassunto");

                    b.Property<string>("Assunto1")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("varchar(55)")
                        .HasColumnName("assunto");

                    b.HasKey("Idassunto")
                        .HasName("PRIMARY");

                    b.ToTable("assunto", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.Atividade", b =>
                {
                    b.Property<int>("IdAtividades")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_atividades");

                    b.Property<string>("Alerta")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("alerta");

                    b.Property<string>("CaminhoDocumentos")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("caminho_documentos");

                    b.Property<DateOnly>("DataAbertura")
                        .HasColumnType("date")
                        .HasColumnName("data_abertura");

                    b.Property<DateOnly>("DataEvento")
                        .HasColumnType("date")
                        .HasColumnName("data_evento");

                    b.Property<DateOnly>("DataFinal")
                        .HasColumnType("date")
                        .HasColumnName("data_final");

                    b.Property<DateOnly>("DataInicial")
                        .HasColumnType("date")
                        .HasColumnName("data_inicial");

                    b.Property<string>("NomeAtividade")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("nome_atividade");

                    b.Property<string>("Recorrencia")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("recorrencia");

                    b.Property<string>("Status")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("status");

                    b.Property<string>("StatusEtapa")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("status_etapa");

                    b.Property<int>("TarefasIdTarefas")
                        .HasColumnType("int")
                        .HasColumnName("tarefas_id_tarefas");

                    b.Property<int>("UsuarioAdmIdUser")
                        .HasColumnType("int")
                        .HasColumnName("usuario_adm_id_user");

                    b.HasKey("IdAtividades")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TarefasIdTarefas" }, "tarefas_id_tarefas");

                    b.ToTable("atividades", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.AtividadesComentario", b =>
                {
                    b.Property<int>("IdatividadesComentarios")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idatividades_comentarios");

                    b.Property<int>("AtividadesIdAtividades")
                        .HasColumnType("int")
                        .HasColumnName("atividades_id_atividades");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("comentario");

                    b.Property<DateOnly>("DataComentario")
                        .HasColumnType("date")
                        .HasColumnName("data_comentario");

                    b.HasKey("IdatividadesComentarios")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AtividadesIdAtividades" }, "atividades_id_atividades");

                    b.ToTable("atividades_comentarios", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.BdLegadoBuscaRapidum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("CategoriaSindical")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("categoria_sindical");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(145)
                        .HasColumnType("varchar(145)")
                        .HasColumnName("cidade");

                    b.Property<string>("CnpjDoSindicato")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cnpj_do_sindicato");

                    b.Property<int>("CodigoInternoBuscaRapida")
                        .HasColumnType("int")
                        .HasColumnName("codigo_interno_busca_rapida");

                    b.Property<int>("CodigoInternoSindicato")
                        .HasColumnType("int")
                        .HasColumnName("codigo_interno_sindicato");

                    b.Property<DateOnly?>("DataDeInclusao")
                        .HasColumnType("date")
                        .HasColumnName("data_de_inclusao");

                    b.Property<string>("Database")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("database");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("documento");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("estado");

                    b.Property<string>("Grupo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("grupo");

                    b.Property<string>("NomeDaBuscaRapida")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nome_da_busca_rapida");

                    b.Property<string>("NomeDoSindicato")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("varchar(350)")
                        .HasColumnName("nome_do_sindicato");

                    b.Property<DateOnly>("PeriodoFinal")
                        .HasColumnType("date")
                        .HasColumnName("periodo_final");

                    b.Property<DateOnly>("PeriodoInicial")
                        .HasColumnType("date")
                        .HasColumnName("periodo_inicial");

                    b.Property<string>("TextoBuscaRapida")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("texto_busca_rapida");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CodigoInternoBuscaRapida" }, "codigo_interno_busca_rapida_UNIQUE")
                        .IsUnique();

                    b.ToTable("_bd_legado_busca_rapida", null, t =>
                        {
                            t.HasComment("Tabela contendo informações de Busca Rápida importadas do Banco de dados do Sistema Legado");
                        });

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.BdLegadoClausula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("CategoriaSindical")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("categoria_sindical");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(145)
                        .HasColumnType("varchar(145)")
                        .HasColumnName("cidade");

                    b.Property<string>("CnpjDoSindicato")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cnpj_do_sindicato");

                    b.Property<int>("CodigoInternoClausula")
                        .HasColumnType("int")
                        .HasColumnName("codigo_interno_clausula");

                    b.Property<int>("CodigoInternoSindicato")
                        .HasColumnType("int")
                        .HasColumnName("codigo_interno_sindicato");

                    b.Property<DateOnly?>("DataDeInclusao")
                        .HasColumnType("date")
                        .HasColumnName("data_de_inclusao");

                    b.Property<string>("Database")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("database");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("documento");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("estado");

                    b.Property<string>("Grupo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("grupo");

                    b.Property<string>("NomeDaClausula")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nome_da_clausula");

                    b.Property<string>("NomeDoSindicato")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("varchar(350)")
                        .HasColumnName("nome_do_sindicato");

                    b.Property<DateOnly>("PeriodoFinal")
                        .HasColumnType("date")
                        .HasColumnName("periodo_final");

                    b.Property<DateOnly>("PeriodoInicial")
                        .HasColumnType("date")
                        .HasColumnName("periodo_inicial");

                    b.Property<string>("TextoClausula")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("texto_clausula");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CodigoInternoClausula" }, "codigo_interno_clausula_UNIQUE")
                        .IsUnique();

                    b.ToTable("_bd_legado_clausulas", null, t =>
                        {
                            t.HasComment("Tabela contendo informações de Cláusulas importadas do Banco de dados do Sistema Legado");
                        });

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.CadastroCliente", b =>
                {
                    b.Property<int>("IdcadClientes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idcad_clientes");

                    b.Property<string>("CadSuperior")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("cad_superior");

                    b.Property<string>("EpCodigoempresa")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("ep_codigoempresa");

                    b.Property<string>("EpNomeempresa")
                        .HasMaxLength(125)
                        .HasColumnType("varchar(125)")
                        .HasColumnName("ep_nomeempresa");

                    b.Property<string>("EstBairro")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)")
                        .HasColumnName("est_bairro");

                    b.Property<string>("EstCep")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("est_cep");

                    b.Property<string>("EstCnaemp")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("est_cnaemp");

                    b.Property<string>("EstCnpj")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("est_cnpj");

                    b.Property<string>("EstCodsindlaboral")
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("est_codsindlaboral");

                    b.Property<string>("EstCodsindpatronal")
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("est_codsindpatronal");

                    b.Property<string>("EstCodunidade")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("est_codunidade");

                    b.Property<DateOnly?>("EstDatainativacao")
                        .HasColumnType("date")
                        .HasColumnName("est_datainativacao");

                    b.Property<DateOnly>("EstDatainclusao")
                        .HasColumnType("date")
                        .HasColumnName("est_datainclusao");

                    b.Property<int>("EstLocalizacao")
                        .HasColumnType("int")
                        .HasColumnName("est_localizacao");

                    b.Property<string>("EstLogradouro")
                        .HasMaxLength(155)
                        .HasColumnType("varchar(155)")
                        .HasColumnName("est_logradouro");

                    b.Property<string>("EstNomeunidade")
                        .HasMaxLength(75)
                        .HasColumnType("varchar(75)")
                        .HasColumnName("est_nomeunidade");

                    b.Property<string>("EstRegional")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("est_regional");

                    b.Property<string>("EstTipounidcliente")
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("est_tipounidcliente");

                    b.Property<string>("GeDatafopag")
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("ge_datafopag");

                    b.Property<string>("GeSlaentrega")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("ge_slaentrega");

                    b.Property<string>("GeSlaprioridade")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("ge_slaprioridade");

                    b.Property<string>("GeTipodocumento")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("ge_tipodocumento");

                    b.Property<string>("GeTipoprocessamento")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("ge_tipoprocessamento");

                    b.Property<string>("LogoGrupo")
                        .HasColumnType("longtext")
                        .HasColumnName("logo_grupo");

                    b.Property<string>("Modulos")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("modulos");

                    b.Property<string>("NomeCliente")
                        .HasColumnType("text")
                        .HasColumnName("nome_cliente");

                    b.Property<string>("TipoCliente")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("tipo_cliente");

                    b.HasKey("IdcadClientes")
                        .HasName("PRIMARY");

                    b.ToTable("cadastro_clientes", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.CalendarioGeralNovo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("AcompanhamentoCctId")
                        .HasColumnType("int")
                        .HasColumnName("acompanhamento_cct_id");

                    b.Property<int?>("ClausulaGeralIdClau")
                        .HasColumnType("int")
                        .HasColumnName("clausula_geral_id_clau");

                    b.Property<int?>("DocSindIdDoc")
                        .HasColumnType("int")
                        .HasColumnName("doc_sind_id_doc");

                    b.Property<int?>("SindDirempId")
                        .HasColumnType("int")
                        .HasColumnName("sind_diremp_id");

                    b.Property<int?>("SindDirpatroId")
                        .HasColumnType("int")
                        .HasColumnName("sind_dirpatro_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("calendario_geral_novo", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.CentralSindical", b =>
                {
                    b.Property<int>("IdCentralsindical")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_centralsindical");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("bairro");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cep");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cnpj");

                    b.Property<string>("Complemento")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("complemento");

                    b.Property<string>("Ddd")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ddd");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("email");

                    b.Property<string>("Email2")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("email2");

                    b.Property<string>("Email3")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("email3");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("estado");

                    b.Property<string>("Facebook")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("facebook");

                    b.Property<string>("Instagram")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("instagram");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("logradouro");

                    b.Property<string>("Municipio")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("municipio");

                    b.Property<string>("NomeCentralsindical")
                        .IsRequired()
                        .HasMaxLength(95)
                        .HasColumnType("varchar(95)")
                        .HasColumnName("nome_centralsindical");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("numero");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("sigla");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("status");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telefone");

                    b.Property<string>("Twitter")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("twitter");

                    b.Property<string>("Website")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("website");

                    b.HasKey("IdCentralsindical")
                        .HasName("PRIMARY");

                    b.ToTable("central_sindical", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.ClasseCnaeDocSind", b =>
                {
                    b.Property<int>("IdcnaeDoc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idcnae_doc");

                    b.Property<int>("ClasseCnaeIdCnae")
                        .HasColumnType("int")
                        .HasColumnName("classe_cnae_id_cnae");

                    b.Property<int>("DocSindIdDoc")
                        .HasColumnType("int")
                        .HasColumnName("doc_sind_id_doc");

                    b.HasKey("IdcnaeDoc")
                        .HasName("PRIMARY");

                    b.ToTable("classe_cnae_doc_sind", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.CnaeEmp", b =>
                {
                    b.Property<int>("IdcnaeEmp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idcnae_emp");

                    b.Property<int>("ClasseCnaeIdclasseCnae")
                        .HasColumnType("int")
                        .HasColumnName("classe_cnae_idclasse_cnae");

                    b.Property<int>("ClasseCnaeIdclasseCnaeNavigationId")
                        .HasColumnType("int");

                    b.Property<int>("ClienteUnidadesIdUnidade")
                        .HasColumnType("int")
                        .HasColumnName("cliente_unidades_id_unidade");

                    b.Property<DateOnly?>("DataFinal")
                        .HasColumnType("date")
                        .HasColumnName("data_final");

                    b.Property<DateOnly>("DataInicial")
                        .HasColumnType("date")
                        .HasColumnName("data_inicial");

                    b.HasKey("IdcnaeEmp")
                        .HasName("PRIMARY");

                    b.HasIndex("ClasseCnaeIdclasseCnaeNavigationId");

                    b.HasIndex(new[] { "ClasseCnaeIdclasseCnae" }, "classe_cnae_idclasse_cnae")
                        .HasDatabaseName("classe_cnae_idclasse_cnae2");

                    b.HasIndex(new[] { "ClienteUnidadesIdUnidade" }, "cliente_unidades_id_unidade");

                    b.ToTable("cnae_emp", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.DadosSdf", b =>
                {
                    b.Property<int>("IdFeriados")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_feriados");

                    b.Property<int?>("DocumentosIddocumentos")
                        .HasColumnType("int")
                        .HasColumnName("documentos_iddocumentos");

                    b.Property<int>("FeriadosIdFeriado")
                        .HasColumnType("int")
                        .HasColumnName("feriados_id_feriado");

                    b.Property<int>("LocalizacaoIdLocalizacao")
                        .HasColumnType("int")
                        .HasColumnName("localizacao_id_localizacao");

                    b.HasKey("IdFeriados")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DocumentosIddocumentos" }, "documentos_iddocumentos_ibfk3_idx");

                    b.HasIndex(new[] { "FeriadosIdFeriado" }, "feriados_id_feriados_ibfk1");

                    b.HasIndex(new[] { "LocalizacaoIdLocalizacao" }, "localizacao_id_localizaco_ibfk2");

                    b.ToTable("dados_sdf", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.DiretoriaSindLaboral", b =>
                {
                    b.Property<int?>("ClienteMatrizIdEmpresa")
                        .HasColumnType("int")
                        .HasColumnName("cliente_matriz_id_empresa");

                    b.Property<int?>("ClienteUnidadesIdUnidade")
                        .HasColumnType("int")
                        .HasColumnName("cliente_unidades_id_unidade");

                    b.Property<string>("DirigenteE")
                        .IsRequired()
                        .HasMaxLength(145)
                        .HasColumnType("varchar(145)")
                        .HasColumnName("dirigente_e")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("DirigenteE"), "utf8mb3");

                    b.Property<string>("FuncaoE")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("funcao_e")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("FuncaoE"), "utf8mb3");

                    b.Property<int>("IdDiretoriae")
                        .HasColumnType("int")
                        .HasColumnName("id_diretoriae");

                    b.Property<DateOnly>("InicioMandatoe")
                        .HasColumnType("date")
                        .HasColumnName("inicio_mandatoe");

                    b.Property<int>("SindEmpIdSinde")
                        .HasColumnType("int")
                        .HasColumnName("sind_emp_id_sinde");

                    b.Property<string>("SituacaoE")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("situacao_e")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("SituacaoE"), "utf8mb3");

                    b.Property<DateOnly?>("TerminoMandatoe")
                        .HasColumnType("date")
                        .HasColumnName("termino_mandatoe");

                    b.ToTable((string)null);

                    b.ToView("diretoria_sind_laboral", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.Models.DocSindClienteUnidade", b =>
                {
                    b.Property<int>("IdDocsindClienteunidades")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_docsind_clienteunidades");

                    b.Property<int>("ClienteUnidadesIdUnidade")
                        .HasColumnType("int")
                        .HasColumnName("cliente_unidades_id_unidade");

                    b.Property<int>("DocSindIdDoc")
                        .HasColumnType("int")
                        .HasColumnName("doc_sind_id_doc");

                    b.HasKey("IdDocsindClienteunidades")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DocSindIdDoc" }, "doc_sind_cliente_unidades_ibfk3");

                    b.HasIndex(new[] { "ClienteUnidadesIdUnidade" }, "id_cliente_unidades_ibfk_2");

                    b.ToTable("doc_sind_cliente_unidades", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.Models.DocSindReferencium", b =>
                {
                    b.Property<int>("IddocSindReferencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("iddoc_sind_referencia");

                    b.Property<int>("DocSindIdDoc")
                        .HasColumnType("int")
                        .HasColumnName("doc_sind_id_doc");

                    b.Property<int>("EstruturaClausulaIdEstruturaclausula")
                        .HasColumnType("int")
                        .HasColumnName("estrutura_clausula_id_estruturaclausula");

                    b.HasKey("IddocSindReferencia")
                        .HasName("PRIMARY");

                    b.ToTable("doc_sind_referencia", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.DocSindSindEmp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("DocSindIdDoc")
                        .HasColumnType("int")
                        .HasColumnName("doc_sind_id_doc");

                    b.Property<int>("SindEmpIdSinde")
                        .HasColumnType("int")
                        .HasColumnName("sind_emp_id_sinde");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "SindEmpIdSinde" }, "doc_sind_emp_ibfk_1");

                    b.HasIndex(new[] { "DocSindIdDoc" }, "doc_sind_id_ibfk_2");

                    b.ToTable("doc_sind_sind_emp", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.Models.DocSindSindPatr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("DocSindIdDoc")
                        .HasColumnType("int")
                        .HasColumnName("doc_sind_id_doc");

                    b.Property<int?>("SindPatrIdSindp")
                        .HasColumnType("int")
                        .HasColumnName("sind_patr_id_sindp");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("doc_sind_sind_patr", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.Models.Documento", b =>
                {
                    b.Property<int>("Iddocumentos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("iddocumentos");

                    b.Property<string>("Anuencia")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("anuencia");

                    b.Property<string>("CaminhoArquivo")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("caminho_arquivo");

                    b.Property<string>("ComentarioLegislacao")
                        .HasColumnType("mediumtext")
                        .HasColumnName("comentario_legislacao");

                    b.Property<DateTime>("DataUpload")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("data_upload")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("DescricaoDocumento")
                        .HasMaxLength(65)
                        .HasColumnType("varchar(65)")
                        .HasColumnName("descricao_documento");

                    b.Property<string>("DocumentoRestrito")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("documento_restrito");

                    b.Property<string>("FonteWeb")
                        .HasMaxLength(65)
                        .HasColumnType("varchar(65)")
                        .HasColumnName("fonte_web");

                    b.Property<string>("NumeroLei")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("numero_lei");

                    b.Property<string>("OrigemDocumento")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("origem_documento");

                    b.Property<int?>("SindEmpIdSinde")
                        .HasColumnType("int")
                        .HasColumnName("sind_emp_id_sinde");

                    b.Property<int?>("SindPatrIdSindp")
                        .HasColumnType("int")
                        .HasColumnName("sind_patr_id_sindp");

                    b.Property<string>("Status")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("status");

                    b.Property<int>("TipoDocIdtipoDoc")
                        .HasColumnType("int")
                        .HasColumnName("tipo_doc_idtipo_doc");

                    b.Property<int>("TipoDocIdtipoDocNavigationId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioAdmIdUser")
                        .HasColumnType("int")
                        .HasColumnName("usuario_adm_id_user");

                    b.Property<DateOnly?>("VigenciaFinal")
                        .HasColumnType("date")
                        .HasColumnName("vigencia_final");

                    b.Property<DateOnly?>("VigenciaInicial")
                        .HasColumnType("date")
                        .HasColumnName("vigencia_inicial");

                    b.HasKey("Iddocumentos")
                        .HasName("PRIMARY");

                    b.HasIndex("TipoDocIdtipoDocNavigationId");

                    b.HasIndex(new[] { "TipoDocIdtipoDoc" }, "tipo_doc_idtipo_doc_idx");

                    b.ToTable("documentos", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.Models.DocumentoAssunto", b =>
                {
                    b.Property<int>("IddocumentoAssunto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("iddocumento_assunto");

                    b.Property<int>("DocumentosIddocumentos")
                        .HasColumnType("int")
                        .HasColumnName("documentos_iddocumentos");

                    b.Property<int>("EstruturaClausulaIdEstruturaclausula")
                        .HasColumnType("int")
                        .HasColumnName("estrutura_clausula_id_estruturaclausula");

                    b.HasKey("IddocumentoAssunto")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DocumentosIddocumentos" }, "ibfk_doc_abrang_idx");

                    b.HasIndex(new[] { "EstruturaClausulaIdEstruturaclausula" }, "ibfk_doc_assunto_idx");

                    b.ToTable("documento_assunto", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.DocumentosAbrangencium", b =>
                {
                    b.Property<int>("IdAbrangDoc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_abrang_doc");

                    b.Property<int>("DocumentosIddocumentos")
                        .HasColumnType("int")
                        .HasColumnName("documentos_iddocumentos");

                    b.Property<int>("LocalizacaoIdLocalizacao")
                        .HasColumnType("int")
                        .HasColumnName("localizacao_id_localizacao");

                    b.HasKey("IdAbrangDoc")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DocumentosIddocumentos" }, "ibfk_doc_idx");

                    b.HasIndex(new[] { "LocalizacaoIdLocalizacao" }, "ibfk_local_abrang_idx");

                    b.ToTable("documentos_abrangencia", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.DocumentosCnae", b =>
                {
                    b.Property<int>("IddocumentosCnae")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("iddocumentos_cnae");

                    b.Property<int>("ClasseCnaeIdCnae")
                        .HasColumnType("int")
                        .HasColumnName("classe_cnae_id_cnae");

                    b.Property<int>("DocumentosIddocumentos")
                        .HasColumnType("int")
                        .HasColumnName("documentos_iddocumentos");

                    b.HasKey("IddocumentosCnae")
                        .HasName("PRIMARY");

                    b.ToTable("documentos_cnae", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.DocumentosEmpresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("ClienteUnidadesIdUnidade")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("cliente_unidades_id_unidade");

                    b.Property<string>("DocumentosIdDocumento")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("documentos_id_documento");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("documentos_empresa", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.DocumentosSindicatosMaisRecentesUsuarios", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<int>("AnoMesValidadeFinal")
                        .HasColumnType("int")
                        .HasColumnName("ano_mes_validade_final");

                    b.Property<int>("AnoMesValidadeInicial")
                        .HasColumnType("int")
                        .HasColumnName("ano_mes_validade_inicial");

                    b.Property<int>("DocumentoSindicalId")
                        .HasColumnType("int")
                        .HasColumnName("documento_sindical_id");

                    b.Property<int>("RowNum")
                        .HasColumnType("int")
                        .HasColumnName("row_num");

                    b.Property<int>("SindicatoLaboralId")
                        .HasColumnType("int")
                        .HasColumnName("sindicato_laboral_id");

                    b.Property<int>("SindicatoPatronalId")
                        .HasColumnType("int")
                        .HasColumnName("sindicato_patronal_id");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("documento_sindicato_mais_recente_usuario_tb", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.Models.EstruturaClausula", b =>
                {
                    b.Property<int>("IdEstruturaclausula")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_estruturaclausula");

                    b.Property<string>("Calendario")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("calendario");

                    b.Property<string>("ClasseClausula")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("classe_clausula");

                    b.Property<string>("Cor")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("cor");

                    b.Property<string>("DadoclMs")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("dadocl_ms");

                    b.Property<int?>("GrupoClausulaIdgrupoClausula")
                        .HasColumnType("int")
                        .HasColumnName("grupo_clausula_idgrupo_clausula");

                    b.Property<string>("InfoAdicional")
                        .HasColumnType("json")
                        .HasColumnName("info_adicional");

                    b.Property<string>("NomeClausula")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("nome_clausula");

                    b.Property<string>("NomeGrupo")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("nome_grupo");

                    b.Property<string>("Tarefa")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("tarefa");

                    b.Property<string>("TipoClausula")
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("tipo_clausula");

                    b.HasKey("IdEstruturaclausula")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GrupoClausulaIdgrupoClausula" }, "grupo_clausula_idgrupo_clausula");

                    b.ToTable("estrutura_clausula", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.EstruturaClausulasAdTipoinformacaoadicional", b =>
                {
                    b.Property<int>("IdEstruturaTagsClausulasAdTipoinformacaoadicional")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_estrutura_tags_clausulas_ad_tipoinformacaoadicional");

                    b.Property<int>("AdTipoinformacaoadicionalCdtipoinformacaoadicional")
                        .HasColumnType("int")
                        .HasColumnName("ad_tipoinformacaoadicional_cdtipoinformacaoadicional");

                    b.Property<int>("EstruturaClausulaIdEstruturaclausula")
                        .HasColumnType("int")
                        .HasColumnName("estrutura_clausula_id_estruturaclausula");

                    b.HasKey("IdEstruturaTagsClausulasAdTipoinformacaoadicional")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AdTipoinformacaoadicionalCdtipoinformacaoadicional" }, "cdtipoinformacaoadicional");

                    b.HasIndex(new[] { "EstruturaClausulaIdEstruturaclausula" }, "fkid_estrutura_tags_clausulas");

                    b.ToTable("estrutura_clausulas_ad_tipoinformacaoadicional", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.Models.Feriado", b =>
                {
                    b.Property<int>("IdFeriado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_feriado");

                    b.Property<string>("AbrangFeriado")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("varchar(55)")
                        .HasColumnName("abrang_feriado")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AbrangFeriado"), "utf8mb3");

                    b.Property<string>("Dia")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("dia")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Dia"), "utf8mb3");

                    b.Property<int>("Localizacao")
                        .HasColumnType("int")
                        .HasColumnName("localizacao");

                    b.Property<string>("Mes")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("mes")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Mes"), "utf8mb3");

                    b.Property<string>("NomeFeriado")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("varchar(155)")
                        .HasColumnName("nome_feriado")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("NomeFeriado"), "utf8mb3");

                    b.Property<string>("Regra")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("regra")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Regra"), "utf8mb3");

                    b.HasKey("IdFeriado")
                        .HasName("PRIMARY");

                    b.ToTable("feriados", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.Models.FiltroCsv", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Filtro")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("filtro");

                    b.Property<string>("Usuario")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("usuario");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("filtro_csv", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.Models.FormularioFolha", b =>
                {
                    b.Property<int>("IdformularioFolha")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idformulario_folha");

                    b.Property<int?>("AtividadeEconomica")
                        .HasColumnType("int")
                        .HasColumnName("atividade_economica");

                    b.Property<string>("Caminho")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("caminho");

                    b.Property<string>("CodSindcliente")
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("cod_sindcliente");

                    b.Property<DateOnly?>("DataAprovacao")
                        .HasColumnType("date")
                        .HasColumnName("data_aprovacao");

                    b.Property<string>("DataBase")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("data_base");

                    b.Property<int?>("DocSind")
                        .HasColumnType("int")
                        .HasColumnName("doc_sind");

                    b.Property<string>("Formulario")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("formulario");

                    b.Property<string>("NomeArqExcell")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("nome_arq_excell");

                    b.Property<int?>("NomeDocumento")
                        .HasColumnType("int")
                        .HasColumnName("nome_documento");

                    b.Property<int?>("SiglaLaboral")
                        .HasColumnType("int")
                        .HasColumnName("sigla_laboral");

                    b.Property<int?>("SiglaPatronal")
                        .HasColumnType("int")
                        .HasColumnName("sigla_patronal");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("status");

                    b.Property<DateOnly?>("UltimaAtualizacao")
                        .HasColumnType("date")
                        .HasColumnName("ultima_atualizacao");

                    b.Property<int?>("Usuario")
                        .HasColumnType("int")
                        .HasColumnName("usuario");

                    b.Property<DateOnly?>("ValidadeFinal")
                        .HasColumnType("date")
                        .HasColumnName("validade_final");

                    b.HasKey("IdformularioFolha")
                        .HasName("PRIMARY");

                    b.ToTable("formulario_folha", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.FormularioGrupo", b =>
                {
                    b.Property<int>("IdFormulariogrupo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_formulariogrupo");

                    b.Property<int>("ClienteGrupoIdGrupoEconomico")
                        .HasColumnType("int")
                        .HasColumnName("cliente_grupo_id_grupo_economico");

                    b.Property<int>("DocSindIdDoc")
                        .HasColumnType("int")
                        .HasColumnName("doc_sind_id_doc");

                    b.Property<string>("FormularioComunicado")
                        .HasColumnType("json")
                        .HasColumnName("formulario_comunicado");

                    b.HasKey("IdFormulariogrupo")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ClienteGrupoIdGrupoEconomico", "DocSindIdDoc" }, "idx_duplicate_check")
                        .IsUnique();

                    b.ToTable("formulario_grupo", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.Models.GrupoClausula", b =>
                {
                    b.Property<int>("IdgrupoClausula")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idgrupo_clausula");

                    b.Property<string>("Cor")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("cor");

                    b.Property<string>("NomeGrupo")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("nome_grupo");

                    b.HasKey("IdgrupoClausula")
                        .HasName("PRIMARY");

                    b.ToTable("grupo_clausula", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.Models.Helpdesk", b =>
                {
                    b.Property<int>("Idhelpdesk")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idhelpdesk");

                    b.Property<string>("CaminhoArquivo")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("caminho_arquivo");

                    b.Property<int?>("Clausula")
                        .HasColumnType("int")
                        .HasColumnName("clausula");

                    b.Property<string>("ComentarioChamado")
                        .HasColumnType("json")
                        .HasColumnName("comentario_chamado");

                    b.Property<DateTime?>("DataAbertura")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("data_abertura");

                    b.Property<DateTime?>("DataFechado")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("data_fechado");

                    b.Property<DateOnly?>("DataVencimento")
                        .HasColumnType("date")
                        .HasColumnName("data_vencimento");

                    b.Property<int?>("Estabelecimento")
                        .HasColumnType("int")
                        .HasColumnName("estabelecimento");

                    b.Property<int>("IdUserC")
                        .HasColumnType("int")
                        .HasColumnName("id_userC");

                    b.Property<int?>("IdUserR")
                        .HasColumnType("int")
                        .HasColumnName("id_userR");

                    b.Property<DateTime?>("InicioResposta")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("inicio_resposta");

                    b.Property<int?>("SindLaboral")
                        .HasColumnType("int")
                        .HasColumnName("sind_laboral");

                    b.Property<int?>("SindPatronal")
                        .HasColumnType("int")
                        .HasColumnName("sind_patronal");

                    b.Property<string>("StatusChamado")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("status_chamado");

                    b.Property<string>("TipoChamado")
                        .HasMaxLength(115)
                        .HasColumnType("varchar(115)")
                        .HasColumnName("tipo_chamado");

                    b.HasKey("Idhelpdesk")
                        .HasName("PRIMARY");

                    b.ToTable("helpdesk", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.Indecon", b =>
                {
                    b.Property<int>("IdIndecon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_indecon");

                    b.Property<int?>("ClienteGrupoIdGrupoEconomico")
                        .HasColumnType("int")
                        .HasColumnName("cliente_grupo_id_grupo_economico");

                    b.Property<DateTime?>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("criado_em")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<float?>("DadoProjetado")
                        .HasColumnType("float")
                        .HasColumnName("dado_projetado");

                    b.Property<float?>("DadoReal")
                        .HasColumnType("float")
                        .HasColumnName("dado_real");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("data");

                    b.Property<string>("Fonte")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("fonte");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    b.Property<string>("Indicador")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("indicador");

                    b.Property<string>("Origem")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("origem");

                    b.HasKey("IdIndecon")
                        .HasName("PRIMARY");

                    b.ToTable("indecon", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.IndeconReal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CriadoEm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("criado_em")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<float>("DadoReal")
                        .HasColumnType("float")
                        .HasColumnName("dado_real");

                    b.Property<string>("Indicador")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("indicador");

                    b.Property<DateOnly?>("PeriodoData")
                        .HasColumnType("date")
                        .HasColumnName("periodo_data");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("indecon_real", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.Models.InformacaoAdicionalCombo", b =>
                {
                    b.Property<int>("IdCombo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_combo");

                    b.Property<int>("AdTipoinformacaoadicionalId")
                        .HasColumnType("int")
                        .HasColumnName("ad_tipoinformacaoadicional_id");

                    b.Property<string>("Options")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("options");

                    b.HasKey("IdCombo")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AdTipoinformacaoadicionalId" }, "ad_tipoinfo_id");

                    b.ToTable("informacao_adicional_combo", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.Models.InformacaoAdicionalGrupo", b =>
                {
                    b.Property<int>("IdGrupo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_grupo");

                    b.Property<int>("AdTipoinformacaoadicionalId")
                        .HasColumnType("int")
                        .HasColumnName("ad_tipoinformacaoadicional_id");

                    b.Property<sbyte>("ExibeComparativoMapaSindical")
                        .HasColumnType("TINYINT(0)")
                        .HasColumnName("exibe_comparativo_mapa_sindical");

                    b.Property<int>("InformacaoadicionalNoGrupo")
                        .HasColumnType("int")
                        .HasColumnName("informacaoadicional_no_grupo");

                    b.Property<int>("Sequencia")
                        .HasColumnType("int")
                        .HasColumnName("sequencia");

                    b.HasKey("IdGrupo")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "InformacaoadicionalNoGrupo" }, "info_adic_no_grupo");

                    b.HasIndex(new[] { "AdTipoinformacaoadicionalId" }, "info_adic_tipo_grupo");

                    b.ToTable("informacao_adicional_grupo", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.Models.InformacoesAdicionai", b =>
                {
                    b.Property<int>("IdinformacoesAdicionais")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idinformacoes_adicionais");

                    b.Property<string>("Categoria")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("categoria");

                    b.Property<string>("ClausulaGeral")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("clausula_geral");

                    b.Property<string>("CnpjSindlaboral")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("cnpj_sindlaboral");

                    b.Property<string>("CnpjSindpatronal")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("cnpj_sindpatronal");

                    b.Property<string>("DataAprovacao")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("data_aprovacao");

                    b.Property<string>("DataBase")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("data_base");

                    b.Property<string>("DocSindical")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("doc_sindical");

                    b.Property<string>("GrupoClausula")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("grupo_clausula");

                    b.Property<string>("NomeClausula")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("nome_clausula");

                    b.Property<string>("NomeDocumento")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("nome_documento");

                    b.Property<string>("SindLaboral")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("sind_laboral");

                    b.Property<string>("SindPatronal")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("sind_patronal");

                    b.Property<string>("UfSindlaboral")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("uf_sindlaboral");

                    b.Property<string>("ValidadeFinal")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("validade_final");

                    b.Property<string>("ValidadeInicial")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("validade_inicial");

                    b.HasKey("IdinformacoesAdicionais")
                        .HasName("PRIMARY");

                    b.ToTable("informacoes_adicionais", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.Jfase", b =>
                {
                    b.Property<int>("IdJfase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_jfase");

                    b.Property<string>("Fase")
                        .HasColumnType("json")
                        .HasColumnName("fase");

                    b.HasKey("IdJfase")
                        .HasName("PRIMARY");

                    b.ToTable("jfase", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.JfaseTipoPerguntas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idjfase_tipodados_legendas");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("descricao_tipodado");

                    b.Property<string>("TipoId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("id_tipodado");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("jfase_tipodados_perguntas_legendas", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.NegociacaoCalculo", b =>
                {
                    b.Property<int>("IdnegociacaoCalculadora")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idnegociacao_calculadora");

                    b.Property<int?>("AdTipoinformacaoadicionalCdtipoinformacaoadicional")
                        .HasColumnType("int")
                        .HasColumnName("ad_tipoinformacaoadicional_cdtipoinformacaoadicional");

                    b.Property<string>("Combo")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("combo");

                    b.Property<int>("EstruturaClausulaIdEstruturaclausula")
                        .HasColumnType("int")
                        .HasColumnName("estrutura_clausula_id_estruturaclausula");

                    b.Property<int?>("IdInfoTipoGrupo")
                        .HasColumnType("int")
                        .HasColumnName("id_info_tipo_grupo");

                    b.Property<float?>("Numerico")
                        .HasColumnType("float")
                        .HasColumnName("numerico");

                    b.Property<float?>("Percentual")
                        .HasColumnType("float")
                        .HasColumnName("percentual");

                    b.Property<int?>("Sequencia")
                        .HasColumnType("int")
                        .HasColumnName("sequencia");

                    b.HasKey("IdnegociacaoCalculadora")
                        .HasName("PRIMARY");

                    b.ToTable("negociacao_calculo", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.NegociacaoCenario", b =>
                {
                    b.Property<int>("IdnegociacaoPremissas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idnegociacao_premissas");

                    b.Property<int?>("AdTipoinformacaoadicionalCdtipoinformacaoadicional")
                        .HasColumnType("int")
                        .HasColumnName("ad_tipoinformacaoadicional_cdtipoinformacaoadicional");

                    b.Property<string>("Combo")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("combo");

                    b.Property<int>("EstruturaClausulaIdEstruturaclausula")
                        .HasColumnType("int")
                        .HasColumnName("estrutura_clausula_id_estruturaclausula");

                    b.Property<int?>("IdInfoTipoGrupo")
                        .HasColumnType("int")
                        .HasColumnName("id_info_tipo_grupo");

                    b.Property<int>("NegociacaoIdnegociacao")
                        .HasColumnType("int")
                        .HasColumnName("negociacao_idnegociacao");

                    b.Property<float?>("Numerico")
                        .HasColumnType("float")
                        .HasColumnName("numerico");

                    b.Property<float?>("Percentual")
                        .HasColumnType("float")
                        .HasColumnName("percentual");

                    b.Property<int?>("Sequencia")
                        .HasColumnType("int")
                        .HasColumnName("sequencia");

                    b.HasKey("IdnegociacaoPremissas")
                        .HasName("PRIMARY");

                    b.ToTable("negociacao_cenarios", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.NegociacaoPautum", b =>
                {
                    b.Property<int>("IdnegociacaoPauta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idnegociacao_pauta");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("datetime")
                        .HasColumnName("data_hora");

                    b.Property<int>("NegociacaoIdnegociacao")
                        .HasColumnType("int")
                        .HasColumnName("negociacao_idnegociacao");

                    b.Property<string>("Pauta")
                        .HasColumnType("longtext")
                        .HasColumnName("pauta");

                    b.HasKey("IdnegociacaoPauta")
                        .HasName("PRIMARY");

                    b.ToTable("negociacao_pauta", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.NegociacaoPremissa", b =>
                {
                    b.Property<int>("IdnegociacaoPremissa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idnegociacao_premissa");

                    b.Property<string>("Aproveitamento")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("aproveitamento");

                    b.Property<string>("Atual")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("atual");

                    b.Property<string>("Comentários")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("comentários");

                    b.Property<int>("Idnegociacao")
                        .HasColumnType("int")
                        .HasColumnName("idnegociacao");

                    b.Property<string>("Objetivo")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("objetivo");

                    b.Property<string>("Premissa")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("premissa");

                    b.Property<string>("Resultado")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("resultado");

                    b.Property<string>("TipoPremissa")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("tipo_premissa");

                    b.HasKey("IdnegociacaoPremissa")
                        .HasName("PRIMARY");

                    b.ToTable("negociacao_premissas", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.NegociacaoRodadum", b =>
                {
                    b.Property<int>("IdnegociacaoRodada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idnegociacao_rodada");

                    b.Property<string>("Aproveitamento")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("aproveitamento");

                    b.Property<DateOnly>("DataRodada")
                        .HasColumnType("date")
                        .HasColumnName("data_rodada");

                    b.Property<int>("FaseCctIdFase")
                        .HasColumnType("int")
                        .HasColumnName("fase_cct_id_fase");

                    b.Property<int>("NegociacaoIdnegociacao")
                        .HasColumnType("int")
                        .HasColumnName("negociacao_idnegociacao");

                    b.Property<string>("NumeroRodada")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("numero_rodada");

                    b.HasKey("IdnegociacaoRodada")
                        .HasName("PRIMARY");

                    b.ToTable("negociacao_rodada", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.NegociacaoScript", b =>
                {
                    b.Property<int>("IdnegociacaoScript")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idnegociacao_script");

                    b.Property<DateOnly>("DataScript")
                        .HasColumnType("date")
                        .HasColumnName("data_script");

                    b.Property<int>("NegociacaoIdnegociacao")
                        .HasColumnType("int")
                        .HasColumnName("negociacao_idnegociacao");

                    b.Property<string>("TextoScript")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("texto_script");

                    b.HasKey("IdnegociacaoScript")
                        .HasName("PRIMARY");

                    b.ToTable("negociacao_script", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.Ninfoadicionai", b =>
                {
                    b.Property<int?>("AdTipoinformacaoadicionalCdtipoinformacaoadicional")
                        .HasColumnType("int")
                        .HasColumnName("ad_tipoinformacaoadicional_cdtipoinformacaoadicional");

                    b.Property<int?>("ClausulaGeralIdClau")
                        .HasColumnType("int")
                        .HasColumnName("clausula_geral_id_clau");

                    b.Property<string>("Combo")
                        .HasColumnType("text")
                        .HasColumnName("combo");

                    b.Property<string>("Data")
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<string>("Descricao")
                        .HasColumnType("text")
                        .HasColumnName("descricao");

                    b.Property<int?>("DocSindIdDoc")
                        .HasColumnType("int")
                        .HasColumnName("doc_sind_id_doc");

                    b.Property<int?>("EstruturaClausulaIdEstruturaclausula")
                        .HasColumnType("int")
                        .HasColumnName("estrutura_clausula_id_estruturaclausula");

                    b.Property<int?>("GrupoDados")
                        .HasColumnType("int")
                        .HasColumnName("grupo_dados");

                    b.Property<string>("Hora")
                        .HasColumnType("text")
                        .HasColumnName("hora");

                    b.Property<int?>("IdClausulageralEstruturaClausula")
                        .HasColumnType("int")
                        .HasColumnName("id_clausulageral_estrutura_clausula");

                    b.Property<int?>("IdInfoTipoGrupo")
                        .HasColumnType("int")
                        .HasColumnName("id_info_tipo_grupo");

                    b.Property<int?>("NomeInformacao")
                        .HasColumnType("int")
                        .HasColumnName("nome_informacao");

                    b.Property<string>("Numerico")
                        .HasColumnType("text")
                        .HasColumnName("numerico");

                    b.Property<string>("Percentual")
                        .HasColumnType("text")
                        .HasColumnName("percentual");

                    b.Property<int?>("Sequencia")
                        .HasColumnType("int")
                        .HasColumnName("sequencia");

                    b.Property<string>("Texto")
                        .HasColumnType("text")
                        .HasColumnName("texto");

                    b.ToTable("ninfoadicionais", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.RestritoUsuario", b =>
                {
                    b.Property<int>("IdrestritoUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idrestrito_usuario");

                    b.Property<int>("DocumentosIddocumentos")
                        .HasColumnType("int")
                        .HasColumnName("documentos_iddocumentos");

                    b.Property<int>("UsuarioAdmIdUser")
                        .HasColumnType("int")
                        .HasColumnName("usuario_adm_id_user");

                    b.HasKey("IdrestritoUsuario")
                        .HasName("PRIMARY");

                    b.ToTable("restrito_usuario", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.SindDiremp", b =>
                {
                    b.Property<int>("IdDiretoriae")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_diretoriae");

                    b.Property<int?>("ClienteMatrizIdEmpresa")
                        .HasColumnType("int")
                        .HasColumnName("cliente_matriz_id_empresa");

                    b.Property<int?>("ClienteUnidadesIdUnidade")
                        .HasColumnType("int")
                        .HasColumnName("cliente_unidades_id_unidade");

                    b.Property<string>("DirigenteE")
                        .IsRequired()
                        .HasMaxLength(145)
                        .HasColumnType("varchar(145)")
                        .HasColumnName("dirigente_e");

                    b.Property<string>("FuncaoE")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("funcao_e");

                    b.Property<DateOnly>("InicioMandatoe")
                        .HasColumnType("date")
                        .HasColumnName("inicio_mandatoe");

                    b.Property<int>("SindEmpIdSinde")
                        .HasColumnType("int")
                        .HasColumnName("sind_emp_id_sinde");

                    b.Property<string>("SituacaoE")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("situacao_e");

                    b.Property<DateOnly>("TerminoMandatoe")
                        .HasColumnType("date")
                        .HasColumnName("termino_mandatoe");

                    b.HasKey("IdDiretoriae")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "SindEmpIdSinde" }, "fk_sind_diremp_sind_emp1");

                    b.ToTable("sind_diremp", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.Sinonimo", b =>
                {
                    b.Property<int>("IdSinonimo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_sinonimo");

                    b.Property<int?>("AssuntoIdassunto")
                        .HasColumnType("int")
                        .HasColumnName("assunto_idassunto");

                    b.Property<int>("EstruturaClausulaIdEstruturaclausula")
                        .HasColumnType("int")
                        .HasColumnName("estrutura_clausula_id_estruturaclausula");

                    b.Property<string>("NomeSinonimo")
                        .HasColumnType("text")
                        .HasColumnName("nome_sinonimo");

                    b.HasKey("IdSinonimo")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "EstruturaClausulaIdEstruturaclausula" }, "estrutura_clausula_id_estruturaclausula");

                    b.ToTable("sinonimos", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.Tarefa", b =>
                {
                    b.Property<int>("IdTarefas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_tarefas");

                    b.Property<int?>("Assunto")
                        .HasColumnType("int")
                        .HasColumnName("assunto");

                    b.Property<int>("CalendarGeralIdcalendarGeral")
                        .HasColumnType("int")
                        .HasColumnName("calendar_geral_idcalendar_geral");

                    b.Property<DateOnly>("DataAbertura")
                        .HasColumnType("date")
                        .HasColumnName("data_abertura");

                    b.Property<DateOnly>("DataEvento")
                        .HasColumnType("date")
                        .HasColumnName("data_evento");

                    b.Property<DateOnly?>("DataFinal")
                        .HasColumnType("date")
                        .HasColumnName("data_final");

                    b.Property<DateOnly>("DataInicial")
                        .HasColumnType("date")
                        .HasColumnName("data_inicial");

                    b.Property<string>("NomeTarefa")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("nome_tarefa");

                    b.Property<string>("StatusTarefa")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("status_tarefa");

                    b.Property<int?>("UsuarioAdmIdUser")
                        .HasColumnType("int")
                        .HasColumnName("usuario_adm_id_user");

                    b.HasKey("IdTarefas")
                        .HasName("PRIMARY");

                    b.ToTable("tarefas", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.TemporarioClausulageral", b =>
                {
                    b.Property<int>("IdtemporarioClausulageral")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idtemporario_clausulageral");

                    b.Property<int?>("DocSindIdDocumento")
                        .HasColumnType("int")
                        .HasColumnName("doc_sind_id_documento");

                    b.Property<int>("EstruturaIdEstruturaclausula")
                        .HasColumnType("int")
                        .HasColumnName("estrutura_id_estruturaclausula");

                    b.Property<string>("TexClau")
                        .HasColumnType("longtext")
                        .HasColumnName("tex_clau");

                    b.HasKey("IdtemporarioClausulageral")
                        .HasName("PRIMARY");

                    b.ToTable("temporario_clausulageral", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.TipounidadeCliente", b =>
                {
                    b.Property<int>("IdTiponegocio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_tiponegocio");

                    b.Property<string>("TipoNegocio")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("tipo_negocio");

                    b.HasKey("IdTiponegocio")
                        .HasName("PRIMARY");

                    b.ToTable("tipounidade_cliente", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.WhCalendario", b =>
                {
                    b.Property<int>("IdcalendarGeral")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idcalendar_geral");

                    b.Property<string>("Abrangencia")
                        .HasColumnType("json")
                        .HasColumnName("abrangencia");

                    b.Property<int?>("AdTipoinformacaoadicionalCdtipoinformacaoadicional")
                        .HasColumnType("int")
                        .HasColumnName("ad_tipoinformacaoadicional_cdtipoinformacaoadicional");

                    b.Property<string>("Comentario")
                        .HasColumnType("mediumtext")
                        .HasColumnName("comentario");

                    b.Property<string>("Dados")
                        .HasColumnType("json")
                        .HasColumnName("dados");

                    b.Property<DateOnly?>("DataFinal")
                        .HasColumnType("date")
                        .HasColumnName("data_final");

                    b.Property<DateOnly>("DataInicial")
                        .HasColumnType("date")
                        .HasColumnName("data_inicial");

                    b.Property<TimeOnly?>("HoraEvento")
                        .HasColumnType("time")
                        .HasColumnName("hora_evento");

                    b.Property<int?>("IdClausula")
                        .HasColumnType("int")
                        .HasColumnName("id_clausula");

                    b.Property<string>("IdCnaes")
                        .HasColumnType("json")
                        .HasColumnName("id_cnaes");

                    b.Property<string>("IdSinde")
                        .HasColumnType("json")
                        .HasColumnName("id_sinde");

                    b.Property<string>("IdSindp")
                        .HasColumnType("json")
                        .HasColumnName("id_sindp");

                    b.Property<string>("NomeClausula")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("nome_clausula");

                    b.Property<string>("NomeEvento")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("varchar(125)")
                        .HasColumnName("nome_evento");

                    b.Property<string>("NomeGrupoclausula")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("nome_grupoclausula");

                    b.Property<string>("Origem")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("origem");

                    b.Property<int>("UsuarioAdmIdUser")
                        .HasColumnType("int")
                        .HasColumnName("usuario_adm_id_user");

                    b.HasKey("IdcalendarGeral")
                        .HasName("PRIMARY");

                    b.ToTable("wh_calendario", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_general_ci");
                });

            modelBuilder.Entity("Ineditta.Repository.Sindicatos.Views.OrganizacaoPatronalVw", b =>
                {
                    b.Property<string>("Associado")
                        .HasColumnType("longtext")
                        .HasColumnName("associado");

                    b.Property<string>("Cnpj")
                        .HasColumnType("longtext")
                        .HasColumnName("cnpj");

                    b.Property<string>("Municipio")
                        .HasColumnType("longtext");

                    b.Property<string>("NomeConfederacao")
                        .HasColumnType("longtext")
                        .HasColumnName("nome_confederacao");

                    b.Property<string>("NomeFederacao")
                        .HasColumnType("longtext")
                        .HasColumnName("nome_federacao");

                    b.Property<string>("Sigla")
                        .HasColumnType("longtext")
                        .HasColumnName("sigla");

                    b.Property<int>("SindicatoPatronalId")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.ToTable((string)null);

                    b.ToView("organizacao_patronal_vw", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.Sindicatos.Views.SindicatoVw", b =>
                {
                    b.Property<string>("CentralSindicalCnpj")
                        .HasColumnType("longtext")
                        .HasColumnName("central_sindical_cnpj");

                    b.Property<string>("CentralSindicalNome")
                        .HasColumnType("longtext")
                        .HasColumnName("central_sindical_nome");

                    b.Property<string>("CentralSindicalSigla")
                        .HasColumnType("longtext")
                        .HasColumnName("central_sindical_sigla");

                    b.Property<string>("ConfederacaoLaboralCnpj")
                        .HasColumnType("longtext")
                        .HasColumnName("confederacao_laboral_cnpj");

                    b.Property<string>("ConfederacaoLaboralNome")
                        .HasColumnType("longtext")
                        .HasColumnName("confederacao_laboral_nome");

                    b.Property<string>("ConfederacaoLaboralSigla")
                        .HasColumnType("longtext")
                        .HasColumnName("confederacao_laboral_sigla");

                    b.Property<string>("ConfederacaoPatronalCnpj")
                        .HasColumnType("longtext")
                        .HasColumnName("confederacao_patronal_cnpj");

                    b.Property<string>("ConfederacaoPatronalNome")
                        .HasColumnType("longtext")
                        .HasColumnName("confederacao_patronal_nome");

                    b.Property<string>("ConfederacaoPatronalSigla")
                        .HasColumnType("longtext")
                        .HasColumnName("confederacao_patronal_sigla");

                    b.Property<string>("FederacaoLaboralCnpj")
                        .HasColumnType("longtext")
                        .HasColumnName("federacao_laboral_cnpj");

                    b.Property<string>("FederacaoLaboralNome")
                        .HasColumnType("longtext")
                        .HasColumnName("federacao_laboral_nome");

                    b.Property<string>("FederacaoLaboralSigla")
                        .HasColumnType("longtext")
                        .HasColumnName("federacao_laboral_sigla");

                    b.Property<string>("FederacaoPatronalCnpj")
                        .HasColumnType("longtext")
                        .HasColumnName("federacao_patronal_cnpj");

                    b.Property<string>("FederacaoPatronalNome")
                        .HasColumnType("longtext")
                        .HasColumnName("federacao_patronal_nome");

                    b.Property<string>("FederacaoPatronalSigla")
                        .HasColumnType("longtext")
                        .HasColumnName("federacao_patronal_sigla");

                    b.Property<string>("SindLaboralCnpj")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_laboral_cnpj");

                    b.Property<string>("SindLaboralCodigo")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_laboral_codigo");

                    b.Property<string>("SindLaboralContribuicao")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_laboral_contribuicao");

                    b.Property<string>("SindLaboralDataNegociacao")
                        .HasColumnType("longtext")
                        .HasColumnName("dataneg");

                    b.Property<string>("SindLaboralDenominacao")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_laboral_denominacao");

                    b.Property<string>("SindLaboralEmail1")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_laboral_email1");

                    b.Property<string>("SindLaboralEmail2")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_laboral_email2");

                    b.Property<string>("SindLaboralEmail3")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_laboral_email3");

                    b.Property<string>("SindLaboralEnquadramento")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_laboral_enquadramento");

                    b.Property<string>("SindLaboralFacebook")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_laboral_facebook");

                    b.Property<string>("SindLaboralFone1")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_laboral_fone1");

                    b.Property<string>("SindLaboralFone2")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_laboral_fone2");

                    b.Property<string>("SindLaboralFone3")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_laboral_fone3");

                    b.Property<string>("SindLaboralGrau")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_laboral_grau");

                    b.Property<string>("SindLaboralInstagram")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_laboral_instagram");

                    b.Property<string>("SindLaboralLogradouro")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_laboral_logradouro");

                    b.Property<string>("SindLaboralMunicipio")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_laboral_municipio");

                    b.Property<string>("SindLaboralNegociador")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_laboral_negociador");

                    b.Property<string>("SindLaboralRamal")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_laboral_ramal");

                    b.Property<string>("SindLaboralRazao")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_laboral_razao");

                    b.Property<string>("SindLaboralSigla")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_laboral_sigla");

                    b.Property<string>("SindLaboralSite")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_laboral_site");

                    b.Property<string>("SindLaboralSituacao")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_laboral_situacao");

                    b.Property<string>("SindLaboralStatus")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_laboral_status");

                    b.Property<string>("SindLaboralTwitter")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_laboral_twitter");

                    b.Property<string>("SindLaboralUf")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_laboral_uf");

                    b.Property<string>("SindPatronalCnpj")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_patronal_cnpj");

                    b.Property<string>("SindPatronalCodigo")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_patronal_codigo");

                    b.Property<string>("SindPatronalContribuicao")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_patronal_contribuicao");

                    b.Property<string>("SindPatronalDenominacao")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_patronal_denominacao");

                    b.Property<string>("SindPatronalEmail1")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_patronal_email1");

                    b.Property<string>("SindPatronalEmail2")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_patronal_email2");

                    b.Property<string>("SindPatronalEmail3")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_patronal_email3");

                    b.Property<string>("SindPatronalEnquadramento")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_patronal_enquadramento");

                    b.Property<string>("SindPatronalFacebook")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_patronal_facebook");

                    b.Property<string>("SindPatronalFone1")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_patronal_fone1");

                    b.Property<string>("SindPatronalFone2")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_patronal_fone2");

                    b.Property<string>("SindPatronalFone3")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_patronal_fone3");

                    b.Property<string>("SindPatronalGrau")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_patronal_grau");

                    b.Property<string>("SindPatronalInstagram")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_patronal_instagram");

                    b.Property<string>("SindPatronalLogradouro")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_patronal_logradouro");

                    b.Property<string>("SindPatronalMunicipio")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_patronal_municipio");

                    b.Property<string>("SindPatronalNegociador")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_patronal_negociador");

                    b.Property<string>("SindPatronalRamal")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_patronal_ramal");

                    b.Property<string>("SindPatronalRazao")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_patronal_razao");

                    b.Property<string>("SindPatronalSigla")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_patronal_sigla");

                    b.Property<string>("SindPatronalSite")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_patronal_site");

                    b.Property<string>("SindPatronalSituacao")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_patronal_situacao");

                    b.Property<string>("SindPatronalStatus")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_patronal_status");

                    b.Property<string>("SindPatronalTwitter")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_patronal_twitter");

                    b.Property<string>("SindPatronalUf")
                        .HasColumnType("longtext")
                        .HasColumnName("sind_patronal_uf");

                    b.ToTable((string)null);

                    b.ToView("sindicato_vw", (string)null);
                });

            modelBuilder.Entity("Ineditta.Repository.Usuarios.Views.UsuariosAdmsVw", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Cargo")
                        .HasColumnType("longtext")
                        .HasColumnName("cargo");

                    b.Property<DateTime?>("DataCriacao")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_criacao");

                    b.Property<string>("Departamento")
                        .HasColumnType("longtext")
                        .HasColumnName("departamento");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<int?>("IdGrupoEconomico")
                        .HasColumnType("int")
                        .HasColumnName("id_grupoecon");

                    b.Property<int?>("IdSuperior")
                        .HasColumnType("int")
                        .HasColumnName("id_superior");

                    b.Property<string>("IdsFmge")
                        .HasColumnType("json")
                        .HasColumnName("ids_fmge");

                    b.Property<string>("Nivel")
                        .HasColumnType("longtext")
                        .HasColumnName("nivel");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext")
                        .HasColumnName("nome");

                    b.Property<string>("NomeUserCriador")
                        .HasColumnType("longtext")
                        .HasColumnName("nome_user_criador");

                    b.Property<string>("Ramal")
                        .HasColumnType("longtext")
                        .HasColumnName("ramal");

                    b.Property<string>("Telefone")
                        .HasColumnType("longtext")
                        .HasColumnName("telefone");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.ToView("usuarios_adms_vw", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FriendlyName")
                        .HasColumnType("longtext");

                    b.Property<string>("Xml")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("Ineditta.Application.Acompanhamentos.Ccts.Entities.AcompanhamentoCct", b =>
                {
                    b.HasOne("Ineditta.Application.CctsFases.Entities.FasesCct", null)
                        .WithMany()
                        .HasForeignKey("FaseId")
                        .HasConstraintName("fk_acompanhanto_cct_x_fase_cct");

                    b.HasOne("Ineditta.Application.Acompanhamentos.CctsStatus.Entities.AcompanhamentoCctStatus", null)
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .HasConstraintName("fk_acompanhanto_cct_x_acompanhamento_cct_status");

                    b.HasOne("Ineditta.Application.TiposDocumentos.Entities.TipoDocumento", null)
                        .WithMany()
                        .HasForeignKey("TipoDocumentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_acompanhanto_cct_x_tipo_doc");
                });

            modelBuilder.Entity("Ineditta.Application.Acompanhamentos.CctsEstabelecimentos.Entities.AcompanhamentoCctEstabelecimento", b =>
                {
                    b.HasOne("Ineditta.Application.Acompanhamentos.Ccts.Entities.AcompanhamentoCct", null)
                        .WithMany()
                        .HasForeignKey("AcompanhamentoCctId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_acompanhamento_cct_estabelecimento_x_acompanhamento_cct");

                    b.HasOne("Ineditta.Application.ClientesMatriz.Entities.ClienteMatriz", null)
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_acompanhamento_cct_estabelecimento_x_cliente_matriz");

                    b.HasOne("Ineditta.Application.ClientesUnidades.Entities.ClienteUnidade", null)
                        .WithMany()
                        .HasForeignKey("EstabelecimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_acompanhamento_cct_estabelecimento_x_cliente_unidades");

                    b.HasOne("Ineditta.Application.GruposEconomicos.Entities.GrupoEconomico", null)
                        .WithMany()
                        .HasForeignKey("GrupoEconomicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_acompanhamento_cct_estabelecimento_x_cliente_grupo");
                });

            modelBuilder.Entity("Ineditta.Application.Acompanhamentos.CctsLocalizacoes.Entities.AcompanhamentoCctLocalizacao", b =>
                {
                    b.HasOne("Ineditta.Application.Acompanhamentos.Ccts.Entities.AcompanhamentoCct", null)
                        .WithMany()
                        .HasForeignKey("AcompanhamentoCctId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_acompanhamento_cct_localizacao_x_acompanhamento_cct");

                    b.HasOne("Ineditta.Application.Localizacoes.Entities.Localizacao", null)
                        .WithMany()
                        .HasForeignKey("LocalizacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_acompanhamento_cct_localizacao_x_localizacao");
                });

            modelBuilder.Entity("Ineditta.Application.Acompanhamentos.CctsSindicatosLaborais.Entities.AcompanhamentoCctSinditoLaboral", b =>
                {
                    b.HasOne("Ineditta.Application.Acompanhamentos.Ccts.Entities.AcompanhamentoCct", null)
                        .WithMany()
                        .HasForeignKey("AcompanhamentoCctId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_acompanhamento_cct_sindicato_laboral_x_acompanhamento_cct");

                    b.HasOne("Ineditta.Application.Sindicatos.Laborais.Entities.SindicatoLaboral", null)
                        .WithMany()
                        .HasForeignKey("SindicatoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_acompanhamento_cct_sindicato_laboral_x_sind_emp");
                });

            modelBuilder.Entity("Ineditta.Application.Acompanhamentos.CctsSindicatosPatronais.Entities.AcompanhamentoCctSinditoPatronal", b =>
                {
                    b.HasOne("Ineditta.Application.Acompanhamentos.Ccts.Entities.AcompanhamentoCct", null)
                        .WithMany()
                        .HasForeignKey("AcompanhamentoCctId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_acompanhamento_cct_sindicato_patronal_x_acompanhamento_cct");

                    b.HasOne("Ineditta.Application.Sindicatos.Patronais.Entities.SindicatoPatronal", null)
                        .WithMany()
                        .HasForeignKey("SindicatoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fkacompanhamento_cct_sindicato_patronal_x_sind_patr");
                });

            modelBuilder.Entity("Ineditta.Application.BasesTerritoriaisLaborais.Entities.BaseTerritorialLaboral", b =>
                {
                    b.HasOne("Ineditta.Application.Cnaes.Entities.Cnae", null)
                        .WithMany()
                        .HasForeignKey("CnaeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("base_territorialsindemp_ibfk_3");

                    b.HasOne("Ineditta.Application.Localizacoes.Entities.Localizacao", null)
                        .WithMany()
                        .HasForeignKey("LocalizacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("base_territorialsindemp_ibfk_2");

                    b.HasOne("Ineditta.Application.Sindicatos.Laborais.Entities.SindicatoLaboral", null)
                        .WithMany()
                        .HasForeignKey("SindicatoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("base_territorialsindemp_ibfk_1");
                });

            modelBuilder.Entity("Ineditta.Application.BasesTerritoriaisPatronais.Entities.BaseTerritorialPatronal", b =>
                {
                    b.HasOne("Ineditta.Application.DocumentosSindicais.Dtos.Cnae", null)
                        .WithMany()
                        .HasForeignKey("CnaeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("base_territorialsindpatro_ibfk_3");

                    b.HasOne("Ineditta.Application.Localizacoes.Entities.Localizacao", null)
                        .WithMany()
                        .HasForeignKey("LocalizacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("base_territorialsindpatro_ibfk_2");

                    b.HasOne("Ineditta.Application.DocumentosSindicais.Dtos.SindicatoPatronal", null)
                        .WithMany()
                        .HasForeignKey("SindicatoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("base_territorialsindpatro_ibfk_1");
                });

            modelBuilder.Entity("Ineditta.Application.CalendarioSindicais.Eventos.Entities.CalendarioSindical", b =>
                {
                    b.HasOne("Ineditta.Application.SubtiposEventosCalendarioSindical.Entities.SubtipoEventoCalendarioSindical", null)
                        .WithMany()
                        .HasForeignKey("SubtipoEvento")
                        .HasConstraintName("calendario_sindical_tb_ibfk_2");

                    b.HasOne("Ineditta.Application.TiposEventosCalendarioSindical.Entities.TipoEventoCalendarioSindical", null)
                        .WithMany()
                        .HasForeignKey("TipoEvento")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("calendario_sindical_tb_ibfk_1");
                });

            modelBuilder.Entity("Ineditta.Application.Clausulas.Entities.ClausulaGeral", b =>
                {
                    b.HasOne("Ineditta.Repository.Models.Assunto", null)
                        .WithMany()
                        .HasForeignKey("AssuntoId")
                        .HasConstraintName("fk_clausula_geral_x_assunto");

                    b.HasOne("Ineditta.Application.DocumentosSindicais.Entities.DocumentoSindical", null)
                        .WithMany()
                        .HasForeignKey("DocumentoSindicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clausula_geral_x_doc_sind");

                    b.HasOne("Ineditta.Repository.Models.EstruturaClausula", null)
                        .WithMany()
                        .HasForeignKey("EstruturaClausulaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clausula_geral_x_estrutura_clausula");

                    b.HasOne("Ineditta.Application.Usuarios.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("ResponsavelProcessamento")
                        .HasConstraintName("fk_clausula_geral_x_usuario_adm");

                    b.HasOne("Ineditta.Repository.Models.Sinonimo", null)
                        .WithMany()
                        .HasForeignKey("SinonimoId")
                        .HasConstraintName("fk_clausula_geral_x_sinonimos");
                });

            modelBuilder.Entity("Ineditta.Application.ClientesMatriz.Entities.ClienteMatriz", b =>
                {
                    b.HasOne("Ineditta.Application.GruposEconomicos.Entities.GrupoEconomico", null)
                        .WithMany()
                        .HasForeignKey("GrupoEconomicoId")
                        .IsRequired()
                        .HasConstraintName("cliente_matriz_ibfk_1");
                });

            modelBuilder.Entity("Ineditta.Application.ClientesUnidades.Entities.ClienteUnidade", b =>
                {
                    b.HasOne("Ineditta.Application.ClientesMatriz.Entities.ClienteMatriz", null)
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .IsRequired()
                        .HasConstraintName("cliente_unidades_ibfk_1");

                    b.HasOne("Ineditta.Application.Localizacoes.Entities.Localizacao", null)
                        .WithMany()
                        .HasForeignKey("LocalizacaoId")
                        .IsRequired()
                        .HasConstraintName("cliente_unidades_ibfk_3");

                    b.HasOne("Ineditta.Repository.Models.TipounidadeCliente", null)
                        .WithMany("ClienteUnidades")
                        .HasForeignKey("TipoNegocioId")
                        .IsRequired()
                        .HasConstraintName("cliente_unidades_ibfk_2");

                    b.OwnsOne("Ineditta.BuildingBlocks.Core.Domain.ValueObjects.CNPJ", "Cnpj", b1 =>
                        {
                            b1.Property<int>("ClienteUnidadeId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("cnpj_unidade");

                            b1.HasKey("ClienteUnidadeId");

                            b1.ToTable("cliente_unidades");

                            b1.WithOwner()
                                .HasForeignKey("ClienteUnidadeId");
                        });

                    b.OwnsOne("Ineditta.Application.SharedKernel.Logradouros.ValueObjects.Logradouro", "Logradouro", b1 =>
                        {
                            b1.Property<int>("ClienteUnidadeId")
                                .HasColumnType("int");

                            b1.Property<string>("Bairro")
                                .HasMaxLength(85)
                                .HasColumnType("varchar(85)")
                                .HasColumnName("bairro");

                            b1.Property<string>("Endereco")
                                .HasMaxLength(145)
                                .HasColumnType("varchar(145)")
                                .HasColumnName("logradouro");

                            b1.Property<string>("Regiao")
                                .HasMaxLength(45)
                                .HasColumnType("varchar(45)")
                                .HasColumnName("regional");

                            b1.HasKey("ClienteUnidadeId");

                            b1.ToTable("cliente_unidades");

                            b1.WithOwner()
                                .HasForeignKey("ClienteUnidadeId");

                            b1.OwnsOne("Ineditta.BuildingBlocks.Core.Domain.ValueObjects.CEP", "Cep", b2 =>
                                {
                                    b2.Property<int>("LogradouroClienteUnidadeId")
                                        .HasColumnType("int");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasMaxLength(20)
                                        .HasColumnType("varchar(20)")
                                        .HasColumnName("cep");

                                    b2.HasKey("LogradouroClienteUnidadeId");

                                    b2.ToTable("cliente_unidades");

                                    b2.WithOwner()
                                        .HasForeignKey("LogradouroClienteUnidadeId");
                                });

                            b1.Navigation("Cep")
                                .IsRequired();
                        });

                    b.Navigation("Cnpj")
                        .IsRequired();

                    b.Navigation("Logradouro")
                        .IsRequired();
                });

            modelBuilder.Entity("Ineditta.Application.ClientesUnidadesSindicatosPatronais.Entities.ClienteUnidadeSindicatoPatronal", b =>
                {
                    b.HasOne("Ineditta.Application.ClientesUnidades.Entities.ClienteUnidade", null)
                        .WithMany()
                        .HasForeignKey("ClienteUnidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("cliente_unidade_sinedicato_patronal_ibfk_1");

                    b.HasOne("Ineditta.Application.Sindicatos.Patronais.Entities.SindicatoPatronal", null)
                        .WithMany()
                        .HasForeignKey("SindicatoPatronalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("cliente_unidade_sindicato_patronal_ibfk_2");
                });

            modelBuilder.Entity("Ineditta.Application.Comentarios.Entities.Comentario", b =>
                {
                    b.HasOne("Ineditta.Application.Etiquetas.Entities.Etiqueta", null)
                        .WithMany()
                        .HasForeignKey("EtiquetaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_etiqueta_x_comentario");
                });

            modelBuilder.Entity("Ineditta.Application.DirigentesPatronais.Entities.DirigentePatronal", b =>
                {
                    b.HasOne("Ineditta.Application.ClientesUnidades.Entities.ClienteUnidade", null)
                        .WithMany()
                        .HasForeignKey("EstabelecimentoId")
                        .HasConstraintName("fk_sind_dirpatro_sind_patr2");

                    b.HasOne("Ineditta.Application.Sindicatos.Patronais.Entities.SindicatoPatronal", null)
                        .WithMany()
                        .HasForeignKey("SindicatoPatronalId")
                        .IsRequired()
                        .HasConstraintName("fk_sind_dirpatro_sind_patr1");
                });

            modelBuilder.Entity("Ineditta.Application.DocumentosSindicais.Entities.DocumentoSindical", b =>
                {
                    b.HasOne("Ineditta.Repository.Models.TipounidadeCliente", null)
                        .WithMany()
                        .HasForeignKey("TipoNegocioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("doc_sind_ibfk_4");
                });

            modelBuilder.Entity("Ineditta.Application.DocumentosSindicatosLaborais.DocumentoSindicatoLaboral", b =>
                {
                    b.HasOne("Ineditta.Application.DocumentosSindicais.Entities.DocumentoSindical", null)
                        .WithMany()
                        .HasForeignKey("DocumentoSindicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("documento_sindicato_laboral_tb_ibfk_1");

                    b.HasOne("Ineditta.Application.Sindicatos.Laborais.Entities.SindicatoLaboral", null)
                        .WithMany()
                        .HasForeignKey("SindicatoLaboralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("documento_sindicato_laboral_tb_ibfk_2");
                });

            modelBuilder.Entity("Ineditta.Application.DocumentosSindicatosPatronais.DocumentoSindicatoPatronal", b =>
                {
                    b.HasOne("Ineditta.Application.DocumentosSindicais.Entities.DocumentoSindical", null)
                        .WithMany()
                        .HasForeignKey("DocumentoSindicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("documento_sindicato_patronal_tb_ibfk_1");

                    b.HasOne("Ineditta.Application.Sindicatos.Patronais.Entities.SindicatoPatronal", null)
                        .WithMany()
                        .HasForeignKey("SindicatoPatronalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("documento_sindicato_patronal_tb_ibfk_2");
                });

            modelBuilder.Entity("Ineditta.Application.Emails.CaixasDeSaida.Entities.EmailCaixaDeSaida", b =>
                {
                    b.OwnsOne("Ineditta.BuildingBlocks.Core.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<long>("EmailCaixaDeSaidaId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("varchar(100)")
                                .HasColumnName("email");

                            b1.HasKey("EmailCaixaDeSaidaId");

                            b1.ToTable("email_caixa_de_saida_tb");

                            b1.WithOwner()
                                .HasForeignKey("EmailCaixaDeSaidaId");
                        });

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("Ineditta.Application.Emails.StoragesManagers.Entities.EmailStorageManager", b =>
                {
                    b.OwnsOne("Ineditta.BuildingBlocks.Core.Domain.ValueObjects.Email", "From", b1 =>
                        {
                            b1.Property<long>("EmailStorageManagerId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("varchar(100)")
                                .HasColumnName("from");

                            b1.HasKey("EmailStorageManagerId");

                            b1.ToTable("email_storage_manager_tb");

                            b1.WithOwner()
                                .HasForeignKey("EmailStorageManagerId");
                        });

                    b.OwnsOne("Ineditta.BuildingBlocks.Core.Domain.ValueObjects.Email", "To", b1 =>
                        {
                            b1.Property<long>("EmailStorageManagerId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("varchar(100)")
                                .HasColumnName("to");

                            b1.HasKey("EmailStorageManagerId");

                            b1.ToTable("email_storage_manager_tb");

                            b1.WithOwner()
                                .HasForeignKey("EmailStorageManagerId");
                        });

                    b.Navigation("From")
                        .IsRequired();

                    b.Navigation("To")
                        .IsRequired();
                });

            modelBuilder.Entity("Ineditta.Application.Etiquetas.Entities.Etiqueta", b =>
                {
                    b.HasOne("Ineditta.Application.TiposEtiquetas.Entities.TipoEtiqueta", null)
                        .WithMany()
                        .HasForeignKey("TipoEtiquetaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_etiqueta_x_tipo_etiqueta");
                });

            modelBuilder.Entity("Ineditta.Application.AIs.DocumentosSindicais.Entities.IADocumentoSindical", b =>
                {
                    b.HasOne("Ineditta.Application.DocumentosSindicais.Entities.DocumentoSindical", null)
                        .WithMany()
                        .HasForeignKey("DocumentoReferenciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_documento_sindical_ia_x_doc_sind");
                });

            modelBuilder.Entity("Ineditta.Application.InformacoesAdicionais.Cliente.Entities.InformacaoAdicionalCliente", b =>
                {
                    b.HasOne("Ineditta.Application.DocumentosSindicais.Entities.DocumentoSindical", null)
                        .WithMany()
                        .HasForeignKey("DocumentoSindicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_informacao_adicional_cliente_tb_x_docsind");

                    b.HasOne("Ineditta.Application.GruposEconomicos.Entities.GrupoEconomico", null)
                        .WithMany()
                        .HasForeignKey("GrupoEconomicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_informacao_adicional_cliente_tb_x_cliente_grupo");
                });

            modelBuilder.Entity("Ineditta.Application.InformacoesAdicionais.Sisap.Entities.InformacaoAdicionalSisap", b =>
                {
                    b.HasOne("Ineditta.Application.Clausulas.Entities.ClausulaGeral", null)
                        .WithMany()
                        .HasForeignKey("ClausulaGeralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clausula_geral_estrutura_clausula_x_clausula_geral");

                    b.HasOne("Ineditta.Application.DocumentosSindicais.Entities.DocumentoSindical", null)
                        .WithMany()
                        .HasForeignKey("DocumentoSindicalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clausula_geral_estrutura_clausula_x_doc_sind");

                    b.HasOne("Ineditta.Repository.Models.EstruturaClausula", null)
                        .WithMany()
                        .HasForeignKey("EstruturaClausulaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clausula_geral_estrutura_clausula_x_estrutura_clausula");

                    b.HasOne("Ineditta.Repository.Models.AdTipoinformacaoadicional", null)
                        .WithMany()
                        .HasForeignKey("InforamcacaoAdicionalGrupoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clausula_geral_estrutura_clausula_x_info_grupo");

                    b.HasOne("Ineditta.Repository.Models.EstruturaClausula", null)
                        .WithMany()
                        .HasForeignKey("NomeInformacaoEstruturaClausulaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clausula_geral_estrutura_clausula_x_nome_estrutura_clausula");

                    b.HasOne("Ineditta.Repository.Models.AdTipoinformacaoadicional", null)
                        .WithMany()
                        .HasForeignKey("TipoinformacaoadicionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clausula_geral_estrutura_clausula_x_ad_tipoinformacaoadicional");
                });

            modelBuilder.Entity("Ineditta.Application.Localizacoes.Entities.Localizacao", b =>
                {
                    b.OwnsOne("Ineditta.Application.Localizacoes.Enumerations.EstadoEnumeration", "Estado", b1 =>
                        {
                            b1.Property<int>("LocalizacaoId")
                                .HasColumnType("int");

                            b1.Property<string>("Id")
                                .HasMaxLength(20)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("estado");

                            b1.HasKey("LocalizacaoId");

                            b1.ToTable("localizacao");

                            b1.WithOwner()
                                .HasForeignKey("LocalizacaoId");
                        });

                    b.OwnsOne("Ineditta.Application.Localizacoes.Enumerations.PaisEnumeration", "Pais", b1 =>
                        {
                            b1.Property<int>("LocalizacaoId")
                                .HasColumnType("int");

                            b1.Property<string>("Id")
                                .HasMaxLength(20)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("pais");

                            b1.HasKey("LocalizacaoId");

                            b1.ToTable("localizacao");

                            b1.WithOwner()
                                .HasForeignKey("LocalizacaoId");
                        });

                    b.OwnsOne("Ineditta.Application.Localizacoes.Enumerations.RegiaoEnumeration", "Regiao", b1 =>
                        {
                            b1.Property<int>("LocalizacaoId")
                                .HasColumnType("int");

                            b1.Property<string>("Id")
                                .HasMaxLength(20)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("regiao");

                            b1.HasKey("LocalizacaoId");

                            b1.ToTable("localizacao");

                            b1.WithOwner()
                                .HasForeignKey("LocalizacaoId");
                        });

                    b.OwnsOne("Ineditta.Application.Localizacoes.Enumerations.UfEnumeration", "Uf", b1 =>
                        {
                            b1.Property<int>("LocalizacaoId")
                                .HasColumnType("int");

                            b1.Property<string>("Id")
                                .HasMaxLength(2)
                                .HasColumnType("varchar(2)")
                                .HasColumnName("uf");

                            b1.HasKey("LocalizacaoId");

                            b1.ToTable("localizacao");

                            b1.WithOwner()
                                .HasForeignKey("LocalizacaoId");
                        });

                    b.Navigation("Estado")
                        .IsRequired();

                    b.Navigation("Pais")
                        .IsRequired();

                    b.Navigation("Regiao")
                        .IsRequired();

                    b.Navigation("Uf")
                        .IsRequired();
                });

            modelBuilder.Entity("Ineditta.Application.ModulosClientes.Entities.ModuloCliente", b =>
                {
                    b.HasOne("Ineditta.Application.ClientesMatriz.Entities.ClienteMatriz", null)
                        .WithMany()
                        .HasForeignKey("ClienteMatrizId")
                        .IsRequired()
                        .HasConstraintName("modulos_cliente_ibfk_2");

                    b.HasOne("Ineditta.Application.Modulos.Entities.Modulo", null)
                        .WithMany()
                        .HasForeignKey("ModuloId")
                        .IsRequired()
                        .HasConstraintName("modulos_cliente_ibfk_1");
                });

            modelBuilder.Entity("Ineditta.Application.Sindicatos.Laborais.Entities.SindicatoLaboral", b =>
                {
                    b.HasOne("Ineditta.Repository.Models.CentralSindical", null)
                        .WithMany("SindEmps")
                        .HasForeignKey("CentralSindicalId")
                        .HasConstraintName("sind_emp_ibfk_5");

                    b.HasOne("Ineditta.Repository.Models.Associacao", null)
                        .WithMany("SindEmpConfederacaoIdAssociacaoNavigations")
                        .HasForeignKey("ConfederacaoId")
                        .HasConstraintName("sind_emp_ibfk_4");

                    b.HasOne("Ineditta.Repository.Models.Associacao", null)
                        .WithMany("SindEmpFederacaoIdAssociacaoNavigations")
                        .HasForeignKey("FederacaoId")
                        .HasConstraintName("sind_emp_ibfk_6");

                    b.OwnsOne("Ineditta.BuildingBlocks.Core.Domain.ValueObjects.CNPJ", "Cnpj", b1 =>
                        {
                            b1.Property<int>("SindicatoLaboralId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("cnpj_sinde");

                            b1.HasKey("SindicatoLaboralId");

                            b1.ToTable("sind_emp");

                            b1.WithOwner()
                                .HasForeignKey("SindicatoLaboralId");
                        });

                    b.OwnsOne("Ineditta.Application.Sindicatos.Base.ValueObjects.CodigoSindical", "CodigoSindical", b1 =>
                        {
                            b1.Property<int>("SindicatoLaboralId")
                                .HasColumnType("int");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(125)
                                .HasColumnType("varchar(125)")
                                .HasColumnName("codigo_sinde");

                            b1.HasKey("SindicatoLaboralId");

                            b1.ToTable("sind_emp");

                            b1.WithOwner()
                                .HasForeignKey("SindicatoLaboralId");
                        });

                    b.OwnsOne("Ineditta.BuildingBlocks.Core.Domain.ValueObjects.Email", "Email1", b1 =>
                        {
                            b1.Property<int>("SindicatoLaboralId")
                                .HasColumnType("int");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("varchar(100)")
                                .HasColumnName("email1_sinde");

                            b1.HasKey("SindicatoLaboralId");

                            b1.ToTable("sind_emp");

                            b1.WithOwner()
                                .HasForeignKey("SindicatoLaboralId");
                        });

                    b.OwnsOne("Ineditta.BuildingBlocks.Core.Domain.ValueObjects.Email", "Email2", b1 =>
                        {
                            b1.Property<int>("SindicatoLaboralId")
                                .HasColumnType("int");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("varchar(100)")
                                .HasColumnName("email2_sinde");

                            b1.HasKey("SindicatoLaboralId");

                            b1.ToTable("sind_emp");

                            b1.WithOwner()
                                .HasForeignKey("SindicatoLaboralId");
                        });

                    b.OwnsOne("Ineditta.BuildingBlocks.Core.Domain.ValueObjects.Email", "Email3", b1 =>
                        {
                            b1.Property<int>("SindicatoLaboralId")
                                .HasColumnType("int");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("varchar(100)")
                                .HasColumnName("email3_sinde");

                            b1.HasKey("SindicatoLaboralId");

                            b1.ToTable("sind_emp");

                            b1.WithOwner()
                                .HasForeignKey("SindicatoLaboralId");
                        });

                    b.OwnsOne("Ineditta.BuildingBlocks.Core.Domain.ValueObjects.Ramal", "Ramal", b1 =>
                        {
                            b1.Property<int>("SindicatoLaboralId")
                                .HasColumnType("int");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(45)
                                .HasColumnType("varchar(45)")
                                .HasColumnName("ramal_sinde");

                            b1.HasKey("SindicatoLaboralId");

                            b1.ToTable("sind_emp");

                            b1.WithOwner()
                                .HasForeignKey("SindicatoLaboralId");
                        });

                    b.OwnsOne("Ineditta.BuildingBlocks.Core.Domain.ValueObjects.Telefone", "Telefone1", b1 =>
                        {
                            b1.Property<int>("SindicatoLaboralId")
                                .HasColumnType("int");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("fone1_sinde");

                            b1.HasKey("SindicatoLaboralId");

                            b1.ToTable("sind_emp");

                            b1.WithOwner()
                                .HasForeignKey("SindicatoLaboralId");
                        });

                    b.OwnsOne("Ineditta.BuildingBlocks.Core.Domain.ValueObjects.Telefone", "Telefone2", b1 =>
                        {
                            b1.Property<int>("SindicatoLaboralId")
                                .HasColumnType("int");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("fone2_sinde");

                            b1.HasKey("SindicatoLaboralId");

                            b1.ToTable("sind_emp");

                            b1.WithOwner()
                                .HasForeignKey("SindicatoLaboralId");
                        });

                    b.OwnsOne("Ineditta.BuildingBlocks.Core.Domain.ValueObjects.Telefone", "Telefone3", b1 =>
                        {
                            b1.Property<int>("SindicatoLaboralId")
                                .HasColumnType("int");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("fone3_sinde");

                            b1.HasKey("SindicatoLaboralId");

                            b1.ToTable("sind_emp");

                            b1.WithOwner()
                                .HasForeignKey("SindicatoLaboralId");
                        });

                    b.Navigation("Cnpj")
                        .IsRequired();

                    b.Navigation("CodigoSindical")
                        .IsRequired();

                    b.Navigation("Email1");

                    b.Navigation("Email2");

                    b.Navigation("Email3");

                    b.Navigation("Ramal");

                    b.Navigation("Telefone1")
                        .IsRequired();

                    b.Navigation("Telefone2");

                    b.Navigation("Telefone3");
                });

            modelBuilder.Entity("Ineditta.Application.Sindicatos.Patronais.Entities.SindicatoPatronal", b =>
                {
                    b.HasOne("Ineditta.Repository.Models.Associacao", null)
                        .WithMany("SindPatrConfederacaoIdAssociacaoNavigations")
                        .HasForeignKey("ConfederacaoId")
                        .HasConstraintName("sind_patr_ibfk_1");

                    b.HasOne("Ineditta.Repository.Models.Associacao", null)
                        .WithMany("SindPatrFederacaoIdAssociacaoNavigations")
                        .HasForeignKey("FederacaoId")
                        .HasConstraintName("sind_patr_ibfk_2");

                    b.OwnsOne("Ineditta.BuildingBlocks.Core.Domain.ValueObjects.CNPJ", "Cnpj", b1 =>
                        {
                            b1.Property<int>("SindicatoPatronalId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("cnpj_sp");

                            b1.HasKey("SindicatoPatronalId");

                            b1.ToTable("sind_patr");

                            b1.WithOwner()
                                .HasForeignKey("SindicatoPatronalId");
                        });

                    b.OwnsOne("Ineditta.Application.Sindicatos.Base.ValueObjects.CodigoSindical", "CodigoSindical", b1 =>
                        {
                            b1.Property<int>("SindicatoPatronalId")
                                .HasColumnType("int");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(125)
                                .HasColumnType("varchar(125)")
                                .HasColumnName("codigo_sp");

                            b1.HasKey("SindicatoPatronalId");

                            b1.ToTable("sind_patr");

                            b1.WithOwner()
                                .HasForeignKey("SindicatoPatronalId");
                        });

                    b.OwnsOne("Ineditta.BuildingBlocks.Core.Domain.ValueObjects.Email", "Email1", b1 =>
                        {
                            b1.Property<int>("SindicatoPatronalId")
                                .HasColumnType("int");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("varchar(100)")
                                .HasColumnName("email1_sp");

                            b1.HasKey("SindicatoPatronalId");

                            b1.ToTable("sind_patr");

                            b1.WithOwner()
                                .HasForeignKey("SindicatoPatronalId");
                        });

                    b.OwnsOne("Ineditta.BuildingBlocks.Core.Domain.ValueObjects.Email", "Email2", b1 =>
                        {
                            b1.Property<int>("SindicatoPatronalId")
                                .HasColumnType("int");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("varchar(100)")
                                .HasColumnName("email2_sp");

                            b1.HasKey("SindicatoPatronalId");

                            b1.ToTable("sind_patr");

                            b1.WithOwner()
                                .HasForeignKey("SindicatoPatronalId");
                        });

                    b.OwnsOne("Ineditta.BuildingBlocks.Core.Domain.ValueObjects.Email", "Email3", b1 =>
                        {
                            b1.Property<int>("SindicatoPatronalId")
                                .HasColumnType("int");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("varchar(100)")
                                .HasColumnName("email3_sp");

                            b1.HasKey("SindicatoPatronalId");

                            b1.ToTable("sind_patr");

                            b1.WithOwner()
                                .HasForeignKey("SindicatoPatronalId");
                        });

                    b.OwnsOne("Ineditta.BuildingBlocks.Core.Domain.ValueObjects.Ramal", "Ramal", b1 =>
                        {
                            b1.Property<int>("SindicatoPatronalId")
                                .HasColumnType("int");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(45)
                                .HasColumnType("varchar(45)")
                                .HasColumnName("ramal_sp");

                            b1.HasKey("SindicatoPatronalId");

                            b1.ToTable("sind_patr");

                            b1.WithOwner()
                                .HasForeignKey("SindicatoPatronalId");
                        });

                    b.OwnsOne("Ineditta.BuildingBlocks.Core.Domain.ValueObjects.Telefone", "Telefone1", b1 =>
                        {
                            b1.Property<int>("SindicatoPatronalId")
                                .HasColumnType("int");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("fone1_sp");

                            b1.HasKey("SindicatoPatronalId");

                            b1.ToTable("sind_patr");

                            b1.WithOwner()
                                .HasForeignKey("SindicatoPatronalId");
                        });

                    b.OwnsOne("Ineditta.BuildingBlocks.Core.Domain.ValueObjects.Telefone", "Telefone2", b1 =>
                        {
                            b1.Property<int>("SindicatoPatronalId")
                                .HasColumnType("int");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("fone2_sp");

                            b1.HasKey("SindicatoPatronalId");

                            b1.ToTable("sind_patr");

                            b1.WithOwner()
                                .HasForeignKey("SindicatoPatronalId");
                        });

                    b.OwnsOne("Ineditta.BuildingBlocks.Core.Domain.ValueObjects.Telefone", "Telefone3", b1 =>
                        {
                            b1.Property<int>("SindicatoPatronalId")
                                .HasColumnType("int");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("fone3_sp");

                            b1.HasKey("SindicatoPatronalId");

                            b1.ToTable("sind_patr");

                            b1.WithOwner()
                                .HasForeignKey("SindicatoPatronalId");
                        });

                    b.Navigation("Cnpj")
                        .IsRequired();

                    b.Navigation("CodigoSindical")
                        .IsRequired();

                    b.Navigation("Email1");

                    b.Navigation("Email2");

                    b.Navigation("Email3");

                    b.Navigation("Ramal");

                    b.Navigation("Telefone1")
                        .IsRequired();

                    b.Navigation("Telefone2");

                    b.Navigation("Telefone3");
                });

            modelBuilder.Entity("Ineditta.Application.SubtiposEventosCalendarioSindical.Entities.SubtipoEventoCalendarioSindical", b =>
                {
                    b.HasOne("Ineditta.Application.TiposEventosCalendarioSindical.Entities.TipoEventoCalendarioSindical", null)
                        .WithMany()
                        .HasForeignKey("TipoEventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("subtipo_evento_ibfk_1");
                });

            modelBuilder.Entity("Ineditta.Application.TiposDocumentosClientesMatriz.Entities.TipoDocumentoClienteMatriz", b =>
                {
                    b.HasOne("Ineditta.Application.ClientesMatriz.Entities.ClienteMatriz", null)
                        .WithMany()
                        .HasForeignKey("ClienteMatrizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("tipo_documento_matriz_cliente_ibfk_1");

                    b.HasOne("Ineditta.Application.TiposDocumentos.Entities.TipoDocumento", null)
                        .WithMany()
                        .HasForeignKey("TipoDocumentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("tipo_documento_cliente_matriz_ibfk_2");
                });

            modelBuilder.Entity("Ineditta.Application.Usuarios.Entities.Usuario", b =>
                {
                    b.OwnsOne("Ineditta.Application.Usuarios.Entities.Ausencia", "Ausencia", b1 =>
                        {
                            b1.Property<int>("UsuarioId")
                                .HasColumnType("int");

                            b1.Property<DateOnly>("DataFinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("date")
                                .HasColumnName("ausencia_fim")
                                .HasDefaultValueSql("str_to_date(_utf8mb4\\'\\',_utf8mb4\\'%d/%m/%Y\\')");

                            b1.Property<DateOnly>("DataInicial")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("date")
                                .HasColumnName("ausencia_inicio")
                                .HasDefaultValueSql("str_to_date(_utf8mb4\\'\\',_utf8mb4\\'%d/%m/%Y\\')");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("usuario_adm");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.OwnsOne("Ineditta.BuildingBlocks.Core.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<int>("UsuarioId")
                                .HasColumnType("int");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(125)
                                .HasColumnType("varchar(125)")
                                .HasColumnName("email_usuario");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("usuario_adm");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.Navigation("Ausencia");

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("Ineditta.Application.UsuariosTiposEventosCalendarioSindical.Entities.UsuarioTipoEventoCalendarioSindical", b =>
                {
                    b.HasOne("Ineditta.Application.SubtiposEventosCalendarioSindical.Entities.SubtipoEventoCalendarioSindical", null)
                        .WithMany()
                        .HasForeignKey("SubtipoEventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("usuario_tipo_evento_calendario_sindical_ibfk_3");

                    b.HasOne("Ineditta.Application.TiposEventosCalendarioSindical.Entities.TipoEventoCalendarioSindical", null)
                        .WithMany()
                        .HasForeignKey("TipoEventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("usuario_tipo_evento_calendario_sindical_ibfk_2");

                    b.HasOne("Ineditta.Application.Usuarios.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("usuario_tipo_evento_calendario_sindical_ibfk_1");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.AbrangDocsind", b =>
                {
                    b.HasOne("Ineditta.Application.DocumentosSindicais.Entities.DocumentoSindical", "DocSindIdDocumentoNavigation")
                        .WithMany()
                        .HasForeignKey("DocSindIdDocumento")
                        .IsRequired()
                        .HasConstraintName("abrang_docsind_ibfk_2");

                    b.HasOne("Ineditta.Application.Localizacoes.Entities.Localizacao", "LocalizacaoIdLocalizacaoNavigation")
                        .WithMany()
                        .HasForeignKey("LocalizacaoIdLocalizacao")
                        .IsRequired()
                        .HasConstraintName("abrang_docsind_ibfk_1");

                    b.Navigation("DocSindIdDocumentoNavigation");

                    b.Navigation("LocalizacaoIdLocalizacaoNavigation");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.AnuenciaUsuario", b =>
                {
                    b.HasOne("Ineditta.Application.DocumentosSindicais.Entities.DocumentoSindical", "DocumentosIddocumentosNavigation")
                        .WithMany()
                        .HasForeignKey("DocumentosIddocumentos")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ibfk_documentos_anuencia");

                    b.Navigation("DocumentosIddocumentosNavigation");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.Atividade", b =>
                {
                    b.HasOne("Ineditta.Repository.Models.Tarefa", "TarefasIdTarefasNavigation")
                        .WithMany("Atividades")
                        .HasForeignKey("TarefasIdTarefas")
                        .IsRequired()
                        .HasConstraintName("tarefas_id_tarefas");

                    b.Navigation("TarefasIdTarefasNavigation");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.AtividadesComentario", b =>
                {
                    b.HasOne("Ineditta.Repository.Models.Atividade", "AtividadesIdAtividadesNavigation")
                        .WithMany("AtividadesComentarios")
                        .HasForeignKey("AtividadesIdAtividades")
                        .IsRequired()
                        .HasConstraintName("atividades_id_atividades");

                    b.Navigation("AtividadesIdAtividadesNavigation");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.CnaeEmp", b =>
                {
                    b.HasOne("Ineditta.Application.Cnaes.Entities.Cnae", null)
                        .WithMany()
                        .HasForeignKey("ClasseCnaeIdclasseCnae")
                        .IsRequired()
                        .HasConstraintName("cnae_emp_ibfk_1");

                    b.HasOne("Ineditta.Application.Cnaes.Entities.Cnae", "ClasseCnaeIdclasseCnaeNavigation")
                        .WithMany()
                        .HasForeignKey("ClasseCnaeIdclasseCnaeNavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ineditta.Application.ClientesUnidades.Entities.ClienteUnidade", "ClienteUnidadesIdUnidadeNavigation")
                        .WithMany()
                        .HasForeignKey("ClienteUnidadesIdUnidade")
                        .IsRequired()
                        .HasConstraintName("cnae_emp_ibfk_2");

                    b.Navigation("ClasseCnaeIdclasseCnaeNavigation");

                    b.Navigation("ClienteUnidadesIdUnidadeNavigation");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.DadosSdf", b =>
                {
                    b.HasOne("Ineditta.Repository.Models.Documento", "DocumentosIddocumentosNavigation")
                        .WithMany("DadosSdfs")
                        .HasForeignKey("DocumentosIddocumentos")
                        .HasConstraintName("documentos_iddocumentos_ibfk3");

                    b.HasOne("Ineditta.Repository.Models.Feriado", "FeriadosIdFeriadoNavigation")
                        .WithMany("DadosSdfs")
                        .HasForeignKey("FeriadosIdFeriado")
                        .IsRequired()
                        .HasConstraintName("feriados_id_feriado_ibfk1");

                    b.HasOne("Ineditta.Application.Localizacoes.Entities.Localizacao", "LocalizacaoIdLocalizacaoNavigation")
                        .WithMany()
                        .HasForeignKey("LocalizacaoIdLocalizacao")
                        .IsRequired()
                        .HasConstraintName("localizacao_id_localizacao_ibfk2");

                    b.Navigation("DocumentosIddocumentosNavigation");

                    b.Navigation("FeriadosIdFeriadoNavigation");

                    b.Navigation("LocalizacaoIdLocalizacaoNavigation");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.DocSindClienteUnidade", b =>
                {
                    b.HasOne("Ineditta.Application.ClientesUnidades.Entities.ClienteUnidade", "ClienteUnidadesIdUnidadeNavigation")
                        .WithMany()
                        .HasForeignKey("ClienteUnidadesIdUnidade")
                        .IsRequired()
                        .HasConstraintName("id_cliente_unidades_ibfk_2");

                    b.HasOne("Ineditta.Application.DocumentosSindicais.Entities.DocumentoSindical", "DocSindIdDocNavigation")
                        .WithMany()
                        .HasForeignKey("DocSindIdDoc")
                        .IsRequired()
                        .HasConstraintName("doc_sind_cliente_unidades_ibfk3");

                    b.Navigation("ClienteUnidadesIdUnidadeNavigation");

                    b.Navigation("DocSindIdDocNavigation");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.DocSindSindEmp", b =>
                {
                    b.HasOne("Ineditta.Application.DocumentosSindicais.Entities.DocumentoSindical", "DocSindIdDocNavigation")
                        .WithMany()
                        .HasForeignKey("DocSindIdDoc")
                        .IsRequired()
                        .HasConstraintName("doc_sind_id_ibfk_2");

                    b.HasOne("Ineditta.Application.Sindicatos.Laborais.Entities.SindicatoLaboral", "SindEmpIdSindeNavigation")
                        .WithMany()
                        .HasForeignKey("SindEmpIdSinde")
                        .IsRequired()
                        .HasConstraintName("doc_sind_emp_ibfk_1");

                    b.Navigation("DocSindIdDocNavigation");

                    b.Navigation("SindEmpIdSindeNavigation");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.Documento", b =>
                {
                    b.HasOne("Ineditta.Application.TiposDocumentos.Entities.TipoDocumento", null)
                        .WithMany()
                        .HasForeignKey("TipoDocIdtipoDoc")
                        .IsRequired()
                        .HasConstraintName("ibfk_tipo");

                    b.HasOne("Ineditta.Application.TiposDocumentos.Entities.TipoDocumento", "TipoDocIdtipoDocNavigation")
                        .WithMany()
                        .HasForeignKey("TipoDocIdtipoDocNavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoDocIdtipoDocNavigation");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.DocumentoAssunto", b =>
                {
                    b.HasOne("Ineditta.Repository.Models.Documento", "DocumentosIddocumentosNavigation")
                        .WithMany("DocumentoAssuntos")
                        .HasForeignKey("DocumentosIddocumentos")
                        .IsRequired()
                        .HasConstraintName("ibfk_doc_abrang");

                    b.HasOne("Ineditta.Repository.Models.EstruturaClausula", "EstruturaClausulaIdEstruturaclausulaNavigation")
                        .WithMany("DocumentoAssuntos")
                        .HasForeignKey("EstruturaClausulaIdEstruturaclausula")
                        .IsRequired()
                        .HasConstraintName("ibfk_doc_assunto");

                    b.Navigation("DocumentosIddocumentosNavigation");

                    b.Navigation("EstruturaClausulaIdEstruturaclausulaNavigation");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.DocumentosAbrangencium", b =>
                {
                    b.HasOne("Ineditta.Repository.Models.Documento", "DocumentosIddocumentosNavigation")
                        .WithMany("DocumentosAbrangencia")
                        .HasForeignKey("DocumentosIddocumentos")
                        .IsRequired()
                        .HasConstraintName("ibfk_doc");

                    b.HasOne("Ineditta.Application.Localizacoes.Entities.Localizacao", "LocalizacaoIdLocalizacaoNavigation")
                        .WithMany()
                        .HasForeignKey("LocalizacaoIdLocalizacao")
                        .IsRequired()
                        .HasConstraintName("ibfk_local_abrang");

                    b.Navigation("DocumentosIddocumentosNavigation");

                    b.Navigation("LocalizacaoIdLocalizacaoNavigation");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.EstruturaClausula", b =>
                {
                    b.HasOne("Ineditta.Repository.Models.GrupoClausula", "GrupoClausulaIdgrupoClausulaNavigation")
                        .WithMany("EstruturaClausulas")
                        .HasForeignKey("GrupoClausulaIdgrupoClausula")
                        .HasConstraintName("estrutura_clausula_ibfk_1");

                    b.Navigation("GrupoClausulaIdgrupoClausulaNavigation");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.EstruturaClausulasAdTipoinformacaoadicional", b =>
                {
                    b.HasOne("Ineditta.Repository.Models.AdTipoinformacaoadicional", "AdTipoinformacaoadicionalCdtipoinformacaoadicionalNavigation")
                        .WithMany("EstruturaClausulasAdTipoinformacaoadicionals")
                        .HasForeignKey("AdTipoinformacaoadicionalCdtipoinformacaoadicional")
                        .IsRequired()
                        .HasConstraintName("estrutura_clausulas_ad_tipoinformacaoadicional_ibfk_2");

                    b.HasOne("Ineditta.Repository.Models.EstruturaClausula", "EstruturaClausulaIdEstruturaclausulaNavigation")
                        .WithMany("EstruturaClausulasAdTipoinformacaoadicionals")
                        .HasForeignKey("EstruturaClausulaIdEstruturaclausula")
                        .IsRequired()
                        .HasConstraintName("estrutura_clausulas_ad_tipoinformacaoadicional_ibfk_1");

                    b.Navigation("AdTipoinformacaoadicionalCdtipoinformacaoadicionalNavigation");

                    b.Navigation("EstruturaClausulaIdEstruturaclausulaNavigation");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.InformacaoAdicionalCombo", b =>
                {
                    b.HasOne("Ineditta.Repository.Models.AdTipoinformacaoadicional", "AdTipoinformacaoadicional")
                        .WithMany("InformacaoAdicionalCombos")
                        .HasForeignKey("AdTipoinformacaoadicionalId")
                        .IsRequired()
                        .HasConstraintName("ad_tipoinfo_id");

                    b.Navigation("AdTipoinformacaoadicional");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.InformacaoAdicionalGrupo", b =>
                {
                    b.HasOne("Ineditta.Repository.Models.AdTipoinformacaoadicional", "AdTipoinformacaoadicional")
                        .WithMany("InformacaoAdicionalGrupoAdTipoinformacaoadicionals")
                        .HasForeignKey("AdTipoinformacaoadicionalId")
                        .IsRequired()
                        .HasConstraintName("info_adic_tipo_grupo");

                    b.HasOne("Ineditta.Repository.Models.AdTipoinformacaoadicional", "InformacaoadicionalNoGrupoNavigation")
                        .WithMany("InformacaoAdicionalGrupoInformacaoadicionalNoGrupoNavigations")
                        .HasForeignKey("InformacaoadicionalNoGrupo")
                        .IsRequired()
                        .HasConstraintName("info_adic_no_grupo");

                    b.Navigation("AdTipoinformacaoadicional");

                    b.Navigation("InformacaoadicionalNoGrupoNavigation");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.SindDiremp", b =>
                {
                    b.HasOne("Ineditta.Application.Sindicatos.Laborais.Entities.SindicatoLaboral", "SindEmpIdSindeNavigation")
                        .WithMany()
                        .HasForeignKey("SindEmpIdSinde")
                        .IsRequired()
                        .HasConstraintName("sind_diremp_ibfk_1");

                    b.Navigation("SindEmpIdSindeNavigation");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.Sinonimo", b =>
                {
                    b.HasOne("Ineditta.Repository.Models.EstruturaClausula", "EstruturaClausulaIdEstruturaclausulaNavigation")
                        .WithMany("Sinonimos")
                        .HasForeignKey("EstruturaClausulaIdEstruturaclausula")
                        .IsRequired()
                        .HasConstraintName("sinonimos_ibfk_2");

                    b.Navigation("EstruturaClausulaIdEstruturaclausulaNavigation");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.AdTipoinformacaoadicional", b =>
                {
                    b.Navigation("EstruturaClausulasAdTipoinformacaoadicionals");

                    b.Navigation("InformacaoAdicionalCombos");

                    b.Navigation("InformacaoAdicionalGrupoAdTipoinformacaoadicionals");

                    b.Navigation("InformacaoAdicionalGrupoInformacaoadicionalNoGrupoNavigations");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.Associacao", b =>
                {
                    b.Navigation("SindEmpConfederacaoIdAssociacaoNavigations");

                    b.Navigation("SindEmpFederacaoIdAssociacaoNavigations");

                    b.Navigation("SindPatrConfederacaoIdAssociacaoNavigations");

                    b.Navigation("SindPatrFederacaoIdAssociacaoNavigations");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.Atividade", b =>
                {
                    b.Navigation("AtividadesComentarios");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.CentralSindical", b =>
                {
                    b.Navigation("SindEmps");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.Documento", b =>
                {
                    b.Navigation("DadosSdfs");

                    b.Navigation("DocumentoAssuntos");

                    b.Navigation("DocumentosAbrangencia");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.EstruturaClausula", b =>
                {
                    b.Navigation("DocumentoAssuntos");

                    b.Navigation("EstruturaClausulasAdTipoinformacaoadicionals");

                    b.Navigation("Sinonimos");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.Feriado", b =>
                {
                    b.Navigation("DadosSdfs");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.GrupoClausula", b =>
                {
                    b.Navigation("EstruturaClausulas");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.Tarefa", b =>
                {
                    b.Navigation("Atividades");
                });

            modelBuilder.Entity("Ineditta.Repository.Models.TipounidadeCliente", b =>
                {
                    b.Navigation("ClienteUnidades");
                });
#pragma warning restore 612, 618
        }
    }
}
